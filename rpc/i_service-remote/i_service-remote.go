// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"rpc"
)

var _ = rpc.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  OpenSessionResp openSession(OpenSessionReq req)")
  fmt.Fprintln(os.Stderr, "  Status closeSession(CloseSessionReq req)")
  fmt.Fprintln(os.Stderr, "  Status deleteColumns(DeleteColumnsReq req)")
  fmt.Fprintln(os.Stderr, "  Status insertColumnRecords(InsertColumnRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  Status insertNonAlignedColumnRecords(InsertNonAlignedColumnRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  Status insertRowRecords(InsertRowRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  Status insertNonAlignedRowRecords(InsertNonAlignedRowRecordsReq req)")
  fmt.Fprintln(os.Stderr, "  Status deleteDataInColumns(DeleteDataInColumnsReq req)")
  fmt.Fprintln(os.Stderr, "  QueryDataResp queryData(QueryDataReq req)")
  fmt.Fprintln(os.Stderr, "  Status addStorageEngines(AddStorageEnginesReq req)")
  fmt.Fprintln(os.Stderr, "  AggregateQueryResp aggregateQuery(AggregateQueryReq req)")
  fmt.Fprintln(os.Stderr, "  LastQueryResp lastQuery(LastQueryReq req)")
  fmt.Fprintln(os.Stderr, "  DownsampleQueryResp downsampleQuery(DownsampleQueryReq req)")
  fmt.Fprintln(os.Stderr, "  ShowColumnsResp showColumns(ShowColumnsReq req)")
  fmt.Fprintln(os.Stderr, "  GetReplicaNumResp getReplicaNum(GetReplicaNumReq req)")
  fmt.Fprintln(os.Stderr, "  ExecuteSqlResp executeSql(ExecuteSqlReq req)")
  fmt.Fprintln(os.Stderr, "  Status updateUser(UpdateUserReq req)")
  fmt.Fprintln(os.Stderr, "  Status addUser(AddUserReq req)")
  fmt.Fprintln(os.Stderr, "  Status deleteUser(DeleteUserReq req)")
  fmt.Fprintln(os.Stderr, "  GetUserResp getUser(GetUserReq req)")
  fmt.Fprintln(os.Stderr, "  GetClusterInfoResp getClusterInfo(GetClusterInfoReq req)")
  fmt.Fprintln(os.Stderr, "  ExecuteStatementResp executeStatement(ExecuteStatementReq req)")
  fmt.Fprintln(os.Stderr, "  FetchResultsResp fetchResults(FetchResultsReq req)")
  fmt.Fprintln(os.Stderr, "  Status closeStatement(CloseStatementReq req)")
  fmt.Fprintln(os.Stderr, "  CommitTransformJobResp commitTransformJob(CommitTransformJobReq req)")
  fmt.Fprintln(os.Stderr, "  QueryTransformJobStatusResp queryTransformJobStatus(QueryTransformJobStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ShowEligibleJobResp showEligibleJob(ShowEligibleJobReq req)")
  fmt.Fprintln(os.Stderr, "  Status cancelTransformJob(CancelTransformJobReq req)")
  fmt.Fprintln(os.Stderr, "  Status registerTask(RegisterTaskReq req)")
  fmt.Fprintln(os.Stderr, "  Status dropTask(DropTaskReq req)")
  fmt.Fprintln(os.Stderr, "  GetRegisterTaskInfoResp getRegisterTaskInfo(GetRegisterTaskInfoReq req)")
  fmt.Fprintln(os.Stderr, "  CurveMatchResp curveMatch(CurveMatchReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := rpc.NewIServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "openSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenSession requires 1 args")
      flag.Usage()
    }
    arg339 := flag.Arg(1)
    mbTrans340 := thrift.NewTMemoryBufferLen(len(arg339))
    defer mbTrans340.Close()
    _, err341 := mbTrans340.WriteString(arg339)
    if err341 != nil {
      Usage()
      return
    }
    factory342 := thrift.NewTJSONProtocolFactory()
    jsProt343 := factory342.GetProtocol(mbTrans340)
    argvalue0 := rpc.NewOpenSessionReq()
    err344 := argvalue0.Read(context.Background(), jsProt343)
    if err344 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "closeSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseSession requires 1 args")
      flag.Usage()
    }
    arg345 := flag.Arg(1)
    mbTrans346 := thrift.NewTMemoryBufferLen(len(arg345))
    defer mbTrans346.Close()
    _, err347 := mbTrans346.WriteString(arg345)
    if err347 != nil {
      Usage()
      return
    }
    factory348 := thrift.NewTJSONProtocolFactory()
    jsProt349 := factory348.GetProtocol(mbTrans346)
    argvalue0 := rpc.NewCloseSessionReq()
    err350 := argvalue0.Read(context.Background(), jsProt349)
    if err350 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CloseSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteColumns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteColumns requires 1 args")
      flag.Usage()
    }
    arg351 := flag.Arg(1)
    mbTrans352 := thrift.NewTMemoryBufferLen(len(arg351))
    defer mbTrans352.Close()
    _, err353 := mbTrans352.WriteString(arg351)
    if err353 != nil {
      Usage()
      return
    }
    factory354 := thrift.NewTJSONProtocolFactory()
    jsProt355 := factory354.GetProtocol(mbTrans352)
    argvalue0 := rpc.NewDeleteColumnsReq()
    err356 := argvalue0.Read(context.Background(), jsProt355)
    if err356 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertColumnRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertColumnRecords requires 1 args")
      flag.Usage()
    }
    arg357 := flag.Arg(1)
    mbTrans358 := thrift.NewTMemoryBufferLen(len(arg357))
    defer mbTrans358.Close()
    _, err359 := mbTrans358.WriteString(arg357)
    if err359 != nil {
      Usage()
      return
    }
    factory360 := thrift.NewTJSONProtocolFactory()
    jsProt361 := factory360.GetProtocol(mbTrans358)
    argvalue0 := rpc.NewInsertColumnRecordsReq()
    err362 := argvalue0.Read(context.Background(), jsProt361)
    if err362 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertColumnRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertNonAlignedColumnRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertNonAlignedColumnRecords requires 1 args")
      flag.Usage()
    }
    arg363 := flag.Arg(1)
    mbTrans364 := thrift.NewTMemoryBufferLen(len(arg363))
    defer mbTrans364.Close()
    _, err365 := mbTrans364.WriteString(arg363)
    if err365 != nil {
      Usage()
      return
    }
    factory366 := thrift.NewTJSONProtocolFactory()
    jsProt367 := factory366.GetProtocol(mbTrans364)
    argvalue0 := rpc.NewInsertNonAlignedColumnRecordsReq()
    err368 := argvalue0.Read(context.Background(), jsProt367)
    if err368 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertNonAlignedColumnRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertRowRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertRowRecords requires 1 args")
      flag.Usage()
    }
    arg369 := flag.Arg(1)
    mbTrans370 := thrift.NewTMemoryBufferLen(len(arg369))
    defer mbTrans370.Close()
    _, err371 := mbTrans370.WriteString(arg369)
    if err371 != nil {
      Usage()
      return
    }
    factory372 := thrift.NewTJSONProtocolFactory()
    jsProt373 := factory372.GetProtocol(mbTrans370)
    argvalue0 := rpc.NewInsertRowRecordsReq()
    err374 := argvalue0.Read(context.Background(), jsProt373)
    if err374 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertRowRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertNonAlignedRowRecords":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InsertNonAlignedRowRecords requires 1 args")
      flag.Usage()
    }
    arg375 := flag.Arg(1)
    mbTrans376 := thrift.NewTMemoryBufferLen(len(arg375))
    defer mbTrans376.Close()
    _, err377 := mbTrans376.WriteString(arg375)
    if err377 != nil {
      Usage()
      return
    }
    factory378 := thrift.NewTJSONProtocolFactory()
    jsProt379 := factory378.GetProtocol(mbTrans376)
    argvalue0 := rpc.NewInsertNonAlignedRowRecordsReq()
    err380 := argvalue0.Read(context.Background(), jsProt379)
    if err380 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InsertNonAlignedRowRecords(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteDataInColumns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteDataInColumns requires 1 args")
      flag.Usage()
    }
    arg381 := flag.Arg(1)
    mbTrans382 := thrift.NewTMemoryBufferLen(len(arg381))
    defer mbTrans382.Close()
    _, err383 := mbTrans382.WriteString(arg381)
    if err383 != nil {
      Usage()
      return
    }
    factory384 := thrift.NewTJSONProtocolFactory()
    jsProt385 := factory384.GetProtocol(mbTrans382)
    argvalue0 := rpc.NewDeleteDataInColumnsReq()
    err386 := argvalue0.Read(context.Background(), jsProt385)
    if err386 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteDataInColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "queryData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryData requires 1 args")
      flag.Usage()
    }
    arg387 := flag.Arg(1)
    mbTrans388 := thrift.NewTMemoryBufferLen(len(arg387))
    defer mbTrans388.Close()
    _, err389 := mbTrans388.WriteString(arg387)
    if err389 != nil {
      Usage()
      return
    }
    factory390 := thrift.NewTJSONProtocolFactory()
    jsProt391 := factory390.GetProtocol(mbTrans388)
    argvalue0 := rpc.NewQueryDataReq()
    err392 := argvalue0.Read(context.Background(), jsProt391)
    if err392 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addStorageEngines":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddStorageEngines requires 1 args")
      flag.Usage()
    }
    arg393 := flag.Arg(1)
    mbTrans394 := thrift.NewTMemoryBufferLen(len(arg393))
    defer mbTrans394.Close()
    _, err395 := mbTrans394.WriteString(arg393)
    if err395 != nil {
      Usage()
      return
    }
    factory396 := thrift.NewTJSONProtocolFactory()
    jsProt397 := factory396.GetProtocol(mbTrans394)
    argvalue0 := rpc.NewAddStorageEnginesReq()
    err398 := argvalue0.Read(context.Background(), jsProt397)
    if err398 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddStorageEngines(context.Background(), value0))
    fmt.Print("\n")
    break
  case "aggregateQuery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AggregateQuery requires 1 args")
      flag.Usage()
    }
    arg399 := flag.Arg(1)
    mbTrans400 := thrift.NewTMemoryBufferLen(len(arg399))
    defer mbTrans400.Close()
    _, err401 := mbTrans400.WriteString(arg399)
    if err401 != nil {
      Usage()
      return
    }
    factory402 := thrift.NewTJSONProtocolFactory()
    jsProt403 := factory402.GetProtocol(mbTrans400)
    argvalue0 := rpc.NewAggregateQueryReq()
    err404 := argvalue0.Read(context.Background(), jsProt403)
    if err404 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AggregateQuery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "lastQuery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LastQuery requires 1 args")
      flag.Usage()
    }
    arg405 := flag.Arg(1)
    mbTrans406 := thrift.NewTMemoryBufferLen(len(arg405))
    defer mbTrans406.Close()
    _, err407 := mbTrans406.WriteString(arg405)
    if err407 != nil {
      Usage()
      return
    }
    factory408 := thrift.NewTJSONProtocolFactory()
    jsProt409 := factory408.GetProtocol(mbTrans406)
    argvalue0 := rpc.NewLastQueryReq()
    err410 := argvalue0.Read(context.Background(), jsProt409)
    if err410 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LastQuery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "downsampleQuery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DownsampleQuery requires 1 args")
      flag.Usage()
    }
    arg411 := flag.Arg(1)
    mbTrans412 := thrift.NewTMemoryBufferLen(len(arg411))
    defer mbTrans412.Close()
    _, err413 := mbTrans412.WriteString(arg411)
    if err413 != nil {
      Usage()
      return
    }
    factory414 := thrift.NewTJSONProtocolFactory()
    jsProt415 := factory414.GetProtocol(mbTrans412)
    argvalue0 := rpc.NewDownsampleQueryReq()
    err416 := argvalue0.Read(context.Background(), jsProt415)
    if err416 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DownsampleQuery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "showColumns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowColumns requires 1 args")
      flag.Usage()
    }
    arg417 := flag.Arg(1)
    mbTrans418 := thrift.NewTMemoryBufferLen(len(arg417))
    defer mbTrans418.Close()
    _, err419 := mbTrans418.WriteString(arg417)
    if err419 != nil {
      Usage()
      return
    }
    factory420 := thrift.NewTJSONProtocolFactory()
    jsProt421 := factory420.GetProtocol(mbTrans418)
    argvalue0 := rpc.NewShowColumnsReq()
    err422 := argvalue0.Read(context.Background(), jsProt421)
    if err422 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowColumns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getReplicaNum":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetReplicaNum requires 1 args")
      flag.Usage()
    }
    arg423 := flag.Arg(1)
    mbTrans424 := thrift.NewTMemoryBufferLen(len(arg423))
    defer mbTrans424.Close()
    _, err425 := mbTrans424.WriteString(arg423)
    if err425 != nil {
      Usage()
      return
    }
    factory426 := thrift.NewTJSONProtocolFactory()
    jsProt427 := factory426.GetProtocol(mbTrans424)
    argvalue0 := rpc.NewGetReplicaNumReq()
    err428 := argvalue0.Read(context.Background(), jsProt427)
    if err428 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetReplicaNum(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeSql":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteSql requires 1 args")
      flag.Usage()
    }
    arg429 := flag.Arg(1)
    mbTrans430 := thrift.NewTMemoryBufferLen(len(arg429))
    defer mbTrans430.Close()
    _, err431 := mbTrans430.WriteString(arg429)
    if err431 != nil {
      Usage()
      return
    }
    factory432 := thrift.NewTJSONProtocolFactory()
    jsProt433 := factory432.GetProtocol(mbTrans430)
    argvalue0 := rpc.NewExecuteSqlReq()
    err434 := argvalue0.Read(context.Background(), jsProt433)
    if err434 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteSql(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateUser requires 1 args")
      flag.Usage()
    }
    arg435 := flag.Arg(1)
    mbTrans436 := thrift.NewTMemoryBufferLen(len(arg435))
    defer mbTrans436.Close()
    _, err437 := mbTrans436.WriteString(arg435)
    if err437 != nil {
      Usage()
      return
    }
    factory438 := thrift.NewTJSONProtocolFactory()
    jsProt439 := factory438.GetProtocol(mbTrans436)
    argvalue0 := rpc.NewUpdateUserReq()
    err440 := argvalue0.Read(context.Background(), jsProt439)
    if err440 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddUser requires 1 args")
      flag.Usage()
    }
    arg441 := flag.Arg(1)
    mbTrans442 := thrift.NewTMemoryBufferLen(len(arg441))
    defer mbTrans442.Close()
    _, err443 := mbTrans442.WriteString(arg441)
    if err443 != nil {
      Usage()
      return
    }
    factory444 := thrift.NewTJSONProtocolFactory()
    jsProt445 := factory444.GetProtocol(mbTrans442)
    argvalue0 := rpc.NewAddUserReq()
    err446 := argvalue0.Read(context.Background(), jsProt445)
    if err446 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteUser requires 1 args")
      flag.Usage()
    }
    arg447 := flag.Arg(1)
    mbTrans448 := thrift.NewTMemoryBufferLen(len(arg447))
    defer mbTrans448.Close()
    _, err449 := mbTrans448.WriteString(arg447)
    if err449 != nil {
      Usage()
      return
    }
    factory450 := thrift.NewTJSONProtocolFactory()
    jsProt451 := factory450.GetProtocol(mbTrans448)
    argvalue0 := rpc.NewDeleteUserReq()
    err452 := argvalue0.Read(context.Background(), jsProt451)
    if err452 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUser requires 1 args")
      flag.Usage()
    }
    arg453 := flag.Arg(1)
    mbTrans454 := thrift.NewTMemoryBufferLen(len(arg453))
    defer mbTrans454.Close()
    _, err455 := mbTrans454.WriteString(arg453)
    if err455 != nil {
      Usage()
      return
    }
    factory456 := thrift.NewTJSONProtocolFactory()
    jsProt457 := factory456.GetProtocol(mbTrans454)
    argvalue0 := rpc.NewGetUserReq()
    err458 := argvalue0.Read(context.Background(), jsProt457)
    if err458 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getClusterInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetClusterInfo requires 1 args")
      flag.Usage()
    }
    arg459 := flag.Arg(1)
    mbTrans460 := thrift.NewTMemoryBufferLen(len(arg459))
    defer mbTrans460.Close()
    _, err461 := mbTrans460.WriteString(arg459)
    if err461 != nil {
      Usage()
      return
    }
    factory462 := thrift.NewTJSONProtocolFactory()
    jsProt463 := factory462.GetProtocol(mbTrans460)
    argvalue0 := rpc.NewGetClusterInfoReq()
    err464 := argvalue0.Read(context.Background(), jsProt463)
    if err464 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetClusterInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeStatement":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteStatement requires 1 args")
      flag.Usage()
    }
    arg465 := flag.Arg(1)
    mbTrans466 := thrift.NewTMemoryBufferLen(len(arg465))
    defer mbTrans466.Close()
    _, err467 := mbTrans466.WriteString(arg465)
    if err467 != nil {
      Usage()
      return
    }
    factory468 := thrift.NewTJSONProtocolFactory()
    jsProt469 := factory468.GetProtocol(mbTrans466)
    argvalue0 := rpc.NewExecuteStatementReq()
    err470 := argvalue0.Read(context.Background(), jsProt469)
    if err470 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteStatement(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchResults":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchResults requires 1 args")
      flag.Usage()
    }
    arg471 := flag.Arg(1)
    mbTrans472 := thrift.NewTMemoryBufferLen(len(arg471))
    defer mbTrans472.Close()
    _, err473 := mbTrans472.WriteString(arg471)
    if err473 != nil {
      Usage()
      return
    }
    factory474 := thrift.NewTJSONProtocolFactory()
    jsProt475 := factory474.GetProtocol(mbTrans472)
    argvalue0 := rpc.NewFetchResultsReq()
    err476 := argvalue0.Read(context.Background(), jsProt475)
    if err476 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FetchResults(context.Background(), value0))
    fmt.Print("\n")
    break
  case "closeStatement":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseStatement requires 1 args")
      flag.Usage()
    }
    arg477 := flag.Arg(1)
    mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
    defer mbTrans478.Close()
    _, err479 := mbTrans478.WriteString(arg477)
    if err479 != nil {
      Usage()
      return
    }
    factory480 := thrift.NewTJSONProtocolFactory()
    jsProt481 := factory480.GetProtocol(mbTrans478)
    argvalue0 := rpc.NewCloseStatementReq()
    err482 := argvalue0.Read(context.Background(), jsProt481)
    if err482 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CloseStatement(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitTransformJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CommitTransformJob requires 1 args")
      flag.Usage()
    }
    arg483 := flag.Arg(1)
    mbTrans484 := thrift.NewTMemoryBufferLen(len(arg483))
    defer mbTrans484.Close()
    _, err485 := mbTrans484.WriteString(arg483)
    if err485 != nil {
      Usage()
      return
    }
    factory486 := thrift.NewTJSONProtocolFactory()
    jsProt487 := factory486.GetProtocol(mbTrans484)
    argvalue0 := rpc.NewCommitTransformJobReq()
    err488 := argvalue0.Read(context.Background(), jsProt487)
    if err488 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CommitTransformJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "queryTransformJobStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryTransformJobStatus requires 1 args")
      flag.Usage()
    }
    arg489 := flag.Arg(1)
    mbTrans490 := thrift.NewTMemoryBufferLen(len(arg489))
    defer mbTrans490.Close()
    _, err491 := mbTrans490.WriteString(arg489)
    if err491 != nil {
      Usage()
      return
    }
    factory492 := thrift.NewTJSONProtocolFactory()
    jsProt493 := factory492.GetProtocol(mbTrans490)
    argvalue0 := rpc.NewQueryTransformJobStatusReq()
    err494 := argvalue0.Read(context.Background(), jsProt493)
    if err494 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryTransformJobStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "showEligibleJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowEligibleJob requires 1 args")
      flag.Usage()
    }
    arg495 := flag.Arg(1)
    mbTrans496 := thrift.NewTMemoryBufferLen(len(arg495))
    defer mbTrans496.Close()
    _, err497 := mbTrans496.WriteString(arg495)
    if err497 != nil {
      Usage()
      return
    }
    factory498 := thrift.NewTJSONProtocolFactory()
    jsProt499 := factory498.GetProtocol(mbTrans496)
    argvalue0 := rpc.NewShowEligibleJobReq()
    err500 := argvalue0.Read(context.Background(), jsProt499)
    if err500 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowEligibleJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancelTransformJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelTransformJob requires 1 args")
      flag.Usage()
    }
    arg501 := flag.Arg(1)
    mbTrans502 := thrift.NewTMemoryBufferLen(len(arg501))
    defer mbTrans502.Close()
    _, err503 := mbTrans502.WriteString(arg501)
    if err503 != nil {
      Usage()
      return
    }
    factory504 := thrift.NewTJSONProtocolFactory()
    jsProt505 := factory504.GetProtocol(mbTrans502)
    argvalue0 := rpc.NewCancelTransformJobReq()
    err506 := argvalue0.Read(context.Background(), jsProt505)
    if err506 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelTransformJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerTask":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterTask requires 1 args")
      flag.Usage()
    }
    arg507 := flag.Arg(1)
    mbTrans508 := thrift.NewTMemoryBufferLen(len(arg507))
    defer mbTrans508.Close()
    _, err509 := mbTrans508.WriteString(arg507)
    if err509 != nil {
      Usage()
      return
    }
    factory510 := thrift.NewTJSONProtocolFactory()
    jsProt511 := factory510.GetProtocol(mbTrans508)
    argvalue0 := rpc.NewRegisterTaskReq()
    err512 := argvalue0.Read(context.Background(), jsProt511)
    if err512 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegisterTask(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropTask":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTask requires 1 args")
      flag.Usage()
    }
    arg513 := flag.Arg(1)
    mbTrans514 := thrift.NewTMemoryBufferLen(len(arg513))
    defer mbTrans514.Close()
    _, err515 := mbTrans514.WriteString(arg513)
    if err515 != nil {
      Usage()
      return
    }
    factory516 := thrift.NewTJSONProtocolFactory()
    jsProt517 := factory516.GetProtocol(mbTrans514)
    argvalue0 := rpc.NewDropTaskReq()
    err518 := argvalue0.Read(context.Background(), jsProt517)
    if err518 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTask(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRegisterTaskInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRegisterTaskInfo requires 1 args")
      flag.Usage()
    }
    arg519 := flag.Arg(1)
    mbTrans520 := thrift.NewTMemoryBufferLen(len(arg519))
    defer mbTrans520.Close()
    _, err521 := mbTrans520.WriteString(arg519)
    if err521 != nil {
      Usage()
      return
    }
    factory522 := thrift.NewTJSONProtocolFactory()
    jsProt523 := factory522.GetProtocol(mbTrans520)
    argvalue0 := rpc.NewGetRegisterTaskInfoReq()
    err524 := argvalue0.Read(context.Background(), jsProt523)
    if err524 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetRegisterTaskInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "curveMatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CurveMatch requires 1 args")
      flag.Usage()
    }
    arg525 := flag.Arg(1)
    mbTrans526 := thrift.NewTMemoryBufferLen(len(arg525))
    defer mbTrans526.Close()
    _, err527 := mbTrans526.WriteString(arg525)
    if err527 != nil {
      Usage()
      return
    }
    factory528 := thrift.NewTJSONProtocolFactory()
    jsProt529 := factory528.GetProtocol(mbTrans526)
    argvalue0 := rpc.NewCurveMatchReq()
    err530 := argvalue0.Read(context.Background(), jsProt529)
    if err530 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CurveMatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
