// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type DataType int64

const (
	DataType_BOOLEAN DataType = 0
	DataType_INTEGER DataType = 1
	DataType_LONG    DataType = 2
	DataType_FLOAT   DataType = 3
	DataType_DOUBLE  DataType = 4
	DataType_BINARY  DataType = 5
)

func (p DataType) String() string {
	switch p {
	case DataType_BOOLEAN:
		return "BOOLEAN"
	case DataType_INTEGER:
		return "INTEGER"
	case DataType_LONG:
		return "LONG"
	case DataType_FLOAT:
		return "FLOAT"
	case DataType_DOUBLE:
		return "DOUBLE"
	case DataType_BINARY:
		return "BINARY"
	}
	return "<UNSET>"
}

func DataTypeFromString(s string) (DataType, error) {
	switch s {
	case "BOOLEAN":
		return DataType_BOOLEAN, nil
	case "INTEGER":
		return DataType_INTEGER, nil
	case "LONG":
		return DataType_LONG, nil
	case "FLOAT":
		return DataType_FLOAT, nil
	case "DOUBLE":
		return DataType_DOUBLE, nil
	case "BINARY":
		return DataType_BINARY, nil
	}
	return DataType(0), fmt.Errorf("not a valid DataType string")
}

func DataTypePtr(v DataType) *DataType { return &v }

func (p DataType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DataType) UnmarshalText(text []byte) error {
	q, err := DataTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DataType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DataType(v)
	return nil
}

func (p *DataType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AggregateType int64

const (
	AggregateType_MAX         AggregateType = 0
	AggregateType_MIN         AggregateType = 1
	AggregateType_SUM         AggregateType = 2
	AggregateType_COUNT       AggregateType = 3
	AggregateType_AVG         AggregateType = 4
	AggregateType_FIRST_VALUE AggregateType = 5
	AggregateType_LAST_VALUE  AggregateType = 6
	AggregateType_FIRST       AggregateType = 7
	AggregateType_LAST        AggregateType = 8
)

func (p AggregateType) String() string {
	switch p {
	case AggregateType_MAX:
		return "MAX"
	case AggregateType_MIN:
		return "MIN"
	case AggregateType_SUM:
		return "SUM"
	case AggregateType_COUNT:
		return "COUNT"
	case AggregateType_AVG:
		return "AVG"
	case AggregateType_FIRST_VALUE:
		return "FIRST_VALUE"
	case AggregateType_LAST_VALUE:
		return "LAST_VALUE"
	case AggregateType_FIRST:
		return "FIRST"
	case AggregateType_LAST:
		return "LAST"
	}
	return "<UNSET>"
}

func AggregateTypeFromString(s string) (AggregateType, error) {
	switch s {
	case "MAX":
		return AggregateType_MAX, nil
	case "MIN":
		return AggregateType_MIN, nil
	case "SUM":
		return AggregateType_SUM, nil
	case "COUNT":
		return AggregateType_COUNT, nil
	case "AVG":
		return AggregateType_AVG, nil
	case "FIRST_VALUE":
		return AggregateType_FIRST_VALUE, nil
	case "LAST_VALUE":
		return AggregateType_LAST_VALUE, nil
	case "FIRST":
		return AggregateType_FIRST, nil
	case "LAST":
		return AggregateType_LAST, nil
	}
	return AggregateType(0), fmt.Errorf("not a valid AggregateType string")
}

func AggregateTypePtr(v AggregateType) *AggregateType { return &v }

func (p AggregateType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AggregateType) UnmarshalText(text []byte) error {
	q, err := AggregateTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *AggregateType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = AggregateType(v)
	return nil
}

func (p *AggregateType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SqlType int64

const (
	SqlType_Unknown            SqlType = 0
	SqlType_Insert             SqlType = 1
	SqlType_Delete             SqlType = 2
	SqlType_Query              SqlType = 3
	SqlType_GetReplicaNum      SqlType = 4
	SqlType_AddStorageEngines  SqlType = 5
	SqlType_CountPoints        SqlType = 6
	SqlType_ClearData          SqlType = 7
	SqlType_DeleteTimeSeries   SqlType = 8
	SqlType_ShowTimeSeries     SqlType = 9
	SqlType_ShowClusterInfo    SqlType = 10
	SqlType_ShowRegisterTask   SqlType = 11
	SqlType_RegisterTask       SqlType = 12
	SqlType_DropTask           SqlType = 13
	SqlType_CommitTransformJob SqlType = 14
	SqlType_ShowJobStatus      SqlType = 15
)

func (p SqlType) String() string {
	switch p {
	case SqlType_Unknown:
		return "Unknown"
	case SqlType_Insert:
		return "Insert"
	case SqlType_Delete:
		return "Delete"
	case SqlType_Query:
		return "Query"
	case SqlType_GetReplicaNum:
		return "GetReplicaNum"
	case SqlType_AddStorageEngines:
		return "AddStorageEngines"
	case SqlType_CountPoints:
		return "CountPoints"
	case SqlType_ClearData:
		return "ClearData"
	case SqlType_DeleteTimeSeries:
		return "DeleteTimeSeries"
	case SqlType_ShowTimeSeries:
		return "ShowTimeSeries"
	case SqlType_ShowClusterInfo:
		return "ShowClusterInfo"
	case SqlType_ShowRegisterTask:
		return "ShowRegisterTask"
	case SqlType_RegisterTask:
		return "RegisterTask"
	case SqlType_DropTask:
		return "DropTask"
	case SqlType_CommitTransformJob:
		return "CommitTransformJob"
	case SqlType_ShowJobStatus:
		return "ShowJobStatus"
	}
	return "<UNSET>"
}

func SqlTypeFromString(s string) (SqlType, error) {
	switch s {
	case "Unknown":
		return SqlType_Unknown, nil
	case "Insert":
		return SqlType_Insert, nil
	case "Delete":
		return SqlType_Delete, nil
	case "Query":
		return SqlType_Query, nil
	case "GetReplicaNum":
		return SqlType_GetReplicaNum, nil
	case "AddStorageEngines":
		return SqlType_AddStorageEngines, nil
	case "CountPoints":
		return SqlType_CountPoints, nil
	case "ClearData":
		return SqlType_ClearData, nil
	case "DeleteTimeSeries":
		return SqlType_DeleteTimeSeries, nil
	case "ShowTimeSeries":
		return SqlType_ShowTimeSeries, nil
	case "ShowClusterInfo":
		return SqlType_ShowClusterInfo, nil
	case "ShowRegisterTask":
		return SqlType_ShowRegisterTask, nil
	case "RegisterTask":
		return SqlType_RegisterTask, nil
	case "DropTask":
		return SqlType_DropTask, nil
	case "CommitTransformJob":
		return SqlType_CommitTransformJob, nil
	case "ShowJobStatus":
		return SqlType_ShowJobStatus, nil
	}
	return SqlType(0), fmt.Errorf("not a valid SqlType string")
}

func SqlTypePtr(v SqlType) *SqlType { return &v }

func (p SqlType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SqlType) UnmarshalText(text []byte) error {
	q, err := SqlTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SqlType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SqlType(v)
	return nil
}

func (p *SqlType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AuthType int64

const (
	AuthType_Read    AuthType = 0
	AuthType_Write   AuthType = 1
	AuthType_Admin   AuthType = 2
	AuthType_Cluster AuthType = 3
)

func (p AuthType) String() string {
	switch p {
	case AuthType_Read:
		return "Read"
	case AuthType_Write:
		return "Write"
	case AuthType_Admin:
		return "Admin"
	case AuthType_Cluster:
		return "Cluster"
	}
	return "<UNSET>"
}

func AuthTypeFromString(s string) (AuthType, error) {
	switch s {
	case "Read":
		return AuthType_Read, nil
	case "Write":
		return AuthType_Write, nil
	case "Admin":
		return AuthType_Admin, nil
	case "Cluster":
		return AuthType_Cluster, nil
	}
	return AuthType(0), fmt.Errorf("not a valid AuthType string")
}

func AuthTypePtr(v AuthType) *AuthType { return &v }

func (p AuthType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *AuthType) UnmarshalText(text []byte) error {
	q, err := AuthTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *AuthType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = AuthType(v)
	return nil
}

func (p *AuthType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UserType int64

const (
	UserType_Administrator UserType = 0
	UserType_OrdinaryUser  UserType = 1
)

func (p UserType) String() string {
	switch p {
	case UserType_Administrator:
		return "Administrator"
	case UserType_OrdinaryUser:
		return "OrdinaryUser"
	}
	return "<UNSET>"
}

func UserTypeFromString(s string) (UserType, error) {
	switch s {
	case "Administrator":
		return UserType_Administrator, nil
	case "OrdinaryUser":
		return UserType_OrdinaryUser, nil
	}
	return UserType(0), fmt.Errorf("not a valid UserType string")
}

func UserTypePtr(v UserType) *UserType { return &v }

func (p UserType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *UserType) UnmarshalText(text []byte) error {
	q, err := UserTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *UserType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = UserType(v)
	return nil
}

func (p *UserType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ExportType int64

const (
	ExportType_Log   ExportType = 0
	ExportType_File  ExportType = 1
	ExportType_IginX ExportType = 2
)

func (p ExportType) String() string {
	switch p {
	case ExportType_Log:
		return "Log"
	case ExportType_File:
		return "File"
	case ExportType_IginX:
		return "IginX"
	}
	return "<UNSET>"
}

func ExportTypeFromString(s string) (ExportType, error) {
	switch s {
	case "Log":
		return ExportType_Log, nil
	case "File":
		return ExportType_File, nil
	case "IginX":
		return ExportType_IginX, nil
	}
	return ExportType(0), fmt.Errorf("not a valid ExportType string")
}

func ExportTypePtr(v ExportType) *ExportType { return &v }

func (p ExportType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ExportType) UnmarshalText(text []byte) error {
	q, err := ExportTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *ExportType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = ExportType(v)
	return nil
}

func (p *ExportType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TaskType int64

const (
	TaskType_IginX  TaskType = 0
	TaskType_Python TaskType = 1
)

func (p TaskType) String() string {
	switch p {
	case TaskType_IginX:
		return "IginX"
	case TaskType_Python:
		return "Python"
	}
	return "<UNSET>"
}

func TaskTypeFromString(s string) (TaskType, error) {
	switch s {
	case "IginX":
		return TaskType_IginX, nil
	case "Python":
		return TaskType_Python, nil
	}
	return TaskType(0), fmt.Errorf("not a valid TaskType string")
}

func TaskTypePtr(v TaskType) *TaskType { return &v }

func (p TaskType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TaskType) UnmarshalText(text []byte) error {
	q, err := TaskTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TaskType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TaskType(v)
	return nil
}

func (p *TaskType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DataFlowType int64

const (
	DataFlowType_Batch  DataFlowType = 0
	DataFlowType_Stream DataFlowType = 1
)

func (p DataFlowType) String() string {
	switch p {
	case DataFlowType_Batch:
		return "Batch"
	case DataFlowType_Stream:
		return "Stream"
	}
	return "<UNSET>"
}

func DataFlowTypeFromString(s string) (DataFlowType, error) {
	switch s {
	case "Batch":
		return DataFlowType_Batch, nil
	case "Stream":
		return DataFlowType_Stream, nil
	}
	return DataFlowType(0), fmt.Errorf("not a valid DataFlowType string")
}

func DataFlowTypePtr(v DataFlowType) *DataFlowType { return &v }

func (p DataFlowType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DataFlowType) UnmarshalText(text []byte) error {
	q, err := DataFlowTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *DataFlowType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = DataFlowType(v)
	return nil
}

func (p *DataFlowType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type JobState int64

const (
	JobState_JOB_UNKNOWN  JobState = 0
	JobState_JOB_FINISHED JobState = 1
	JobState_JOB_CREATED  JobState = 2
	JobState_JOB_RUNNING  JobState = 3
	JobState_JOB_FAILING  JobState = 4
	JobState_JOB_FAILED   JobState = 5
	JobState_JOB_CLOSING  JobState = 6
	JobState_JOB_CLOSED   JobState = 7
)

func (p JobState) String() string {
	switch p {
	case JobState_JOB_UNKNOWN:
		return "JOB_UNKNOWN"
	case JobState_JOB_FINISHED:
		return "JOB_FINISHED"
	case JobState_JOB_CREATED:
		return "JOB_CREATED"
	case JobState_JOB_RUNNING:
		return "JOB_RUNNING"
	case JobState_JOB_FAILING:
		return "JOB_FAILING"
	case JobState_JOB_FAILED:
		return "JOB_FAILED"
	case JobState_JOB_CLOSING:
		return "JOB_CLOSING"
	case JobState_JOB_CLOSED:
		return "JOB_CLOSED"
	}
	return "<UNSET>"
}

func JobStateFromString(s string) (JobState, error) {
	switch s {
	case "JOB_UNKNOWN":
		return JobState_JOB_UNKNOWN, nil
	case "JOB_FINISHED":
		return JobState_JOB_FINISHED, nil
	case "JOB_CREATED":
		return JobState_JOB_CREATED, nil
	case "JOB_RUNNING":
		return JobState_JOB_RUNNING, nil
	case "JOB_FAILING":
		return JobState_JOB_FAILING, nil
	case "JOB_FAILED":
		return JobState_JOB_FAILED, nil
	case "JOB_CLOSING":
		return JobState_JOB_CLOSING, nil
	case "JOB_CLOSED":
		return JobState_JOB_CLOSED, nil
	}
	return JobState(0), fmt.Errorf("not a valid JobState string")
}

func JobStatePtr(v JobState) *JobState { return &v }

func (p JobState) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *JobState) UnmarshalText(text []byte) error {
	q, err := JobStateFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *JobState) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = JobState(v)
	return nil
}

func (p *JobState) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UDFType int64

const (
	UDFType_UDAF      UDFType = 0
	UDFType_UDTF      UDFType = 1
	UDFType_UDSF      UDFType = 2
	UDFType_TRANSFORM UDFType = 3
)

func (p UDFType) String() string {
	switch p {
	case UDFType_UDAF:
		return "UDAF"
	case UDFType_UDTF:
		return "UDTF"
	case UDFType_UDSF:
		return "UDSF"
	case UDFType_TRANSFORM:
		return "TRANSFORM"
	}
	return "<UNSET>"
}

func UDFTypeFromString(s string) (UDFType, error) {
	switch s {
	case "UDAF":
		return UDFType_UDAF, nil
	case "UDTF":
		return UDFType_UDTF, nil
	case "UDSF":
		return UDFType_UDSF, nil
	case "TRANSFORM":
		return UDFType_TRANSFORM, nil
	}
	return UDFType(0), fmt.Errorf("not a valid UDFType string")
}

func UDFTypePtr(v UDFType) *UDFType { return &v }

func (p UDFType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *UDFType) UnmarshalText(text []byte) error {
	q, err := UDFTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *UDFType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = UDFType(v)
	return nil
}

func (p *UDFType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - Code
//  - Message
//  - SubStatus
type Status struct {
	Code      int32     `thrift:"code,1,required" db:"code" json:"code"`
	Message   *string   `thrift:"message,2" db:"message" json:"message,omitempty"`
	SubStatus []*Status `thrift:"subStatus,3" db:"subStatus" json:"subStatus,omitempty"`
}

func NewStatus() *Status {
	return &Status{}
}

func (p *Status) GetCode() int32 {
	return p.Code
}

var Status_Message_DEFAULT string

func (p *Status) GetMessage() string {
	if !p.IsSetMessage() {
		return Status_Message_DEFAULT
	}
	return *p.Message
}

var Status_SubStatus_DEFAULT []*Status

func (p *Status) GetSubStatus() []*Status {
	return p.SubStatus
}
func (p *Status) IsSetMessage() bool {
	return p.Message != nil
}

func (p *Status) IsSetSubStatus() bool {
	return p.SubStatus != nil
}

func (p *Status) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCode bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetCode = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"))
	}
	return nil
}

func (p *Status) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *Status) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *Status) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Status, 0, size)
	p.SubStatus = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Status{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.SubStatus = append(p.SubStatus, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Status) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Status"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Status) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *Status) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *Status) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubStatus() {
		if err := oprot.WriteFieldBegin("subStatus", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subStatus: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SubStatus)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SubStatus {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subStatus: ", p), err)
		}
	}
	return err
}

func (p *Status) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Status(%+v)", *p)
}

// Attributes:
//  - Username
//  - Password
type OpenSessionReq struct {
	Username *string `thrift:"username,1" db:"username" json:"username,omitempty"`
	Password *string `thrift:"password,2" db:"password" json:"password,omitempty"`
}

func NewOpenSessionReq() *OpenSessionReq {
	return &OpenSessionReq{}
}

var OpenSessionReq_Username_DEFAULT string

func (p *OpenSessionReq) GetUsername() string {
	if !p.IsSetUsername() {
		return OpenSessionReq_Username_DEFAULT
	}
	return *p.Username
}

var OpenSessionReq_Password_DEFAULT string

func (p *OpenSessionReq) GetPassword() string {
	if !p.IsSetPassword() {
		return OpenSessionReq_Password_DEFAULT
	}
	return *p.Password
}
func (p *OpenSessionReq) IsSetUsername() bool {
	return p.Username != nil
}

func (p *OpenSessionReq) IsSetPassword() bool {
	return p.Password != nil
}

func (p *OpenSessionReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OpenSessionReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *OpenSessionReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Password = &v
	}
	return nil
}

func (p *OpenSessionReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenSessionReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OpenSessionReq) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Username)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err)
		}
	}
	return err
}

func (p *OpenSessionReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Password)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err)
		}
	}
	return err
}

func (p *OpenSessionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenSessionReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - SessionId
type OpenSessionResp struct {
	Status    *Status `thrift:"status,1,required" db:"status" json:"status"`
	SessionId *int64  `thrift:"sessionId,2" db:"sessionId" json:"sessionId,omitempty"`
}

func NewOpenSessionResp() *OpenSessionResp {
	return &OpenSessionResp{}
}

var OpenSessionResp_Status_DEFAULT *Status

func (p *OpenSessionResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return OpenSessionResp_Status_DEFAULT
	}
	return p.Status
}

var OpenSessionResp_SessionId_DEFAULT int64

func (p *OpenSessionResp) GetSessionId() int64 {
	if !p.IsSetSessionId() {
		return OpenSessionResp_SessionId_DEFAULT
	}
	return *p.SessionId
}
func (p *OpenSessionResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *OpenSessionResp) IsSetSessionId() bool {
	return p.SessionId != nil
}

func (p *OpenSessionResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *OpenSessionResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *OpenSessionResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = &v
	}
	return nil
}

func (p *OpenSessionResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OpenSessionResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OpenSessionResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *OpenSessionResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionId() {
		if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SessionId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
		}
	}
	return err
}

func (p *OpenSessionResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OpenSessionResp(%+v)", *p)
}

// Attributes:
//  - SessionId
type CloseSessionReq struct {
	SessionId int64 `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
}

func NewCloseSessionReq() *CloseSessionReq {
	return &CloseSessionReq{}
}

func (p *CloseSessionReq) GetSessionId() int64 {
	return p.SessionId
}
func (p *CloseSessionReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	return nil
}

func (p *CloseSessionReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *CloseSessionReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CloseSessionReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloseSessionReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *CloseSessionReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseSessionReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
type DeleteColumnsReq struct {
	SessionId int64    `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths     []string `thrift:"paths,2,required" db:"paths" json:"paths"`
}

func NewDeleteColumnsReq() *DeleteColumnsReq {
	return &DeleteColumnsReq{}
}

func (p *DeleteColumnsReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *DeleteColumnsReq) GetPaths() []string {
	return p.Paths
}
func (p *DeleteColumnsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	return nil
}

func (p *DeleteColumnsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *DeleteColumnsReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Paths = append(p.Paths, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DeleteColumnsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteColumnsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteColumnsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *DeleteColumnsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *DeleteColumnsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteColumnsReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
//  - Timestamps
//  - ValuesList
//  - BitmapList
//  - DataTypeList
//  - TagsList
type InsertColumnRecordsReq struct {
	SessionId    int64               `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths        []string            `thrift:"paths,2,required" db:"paths" json:"paths"`
	Timestamps   []byte              `thrift:"timestamps,3,required" db:"timestamps" json:"timestamps"`
	ValuesList   [][]byte            `thrift:"valuesList,4,required" db:"valuesList" json:"valuesList"`
	BitmapList   [][]byte            `thrift:"bitmapList,5,required" db:"bitmapList" json:"bitmapList"`
	DataTypeList []DataType          `thrift:"dataTypeList,6,required" db:"dataTypeList" json:"dataTypeList"`
	TagsList     []map[string]string `thrift:"tagsList,7" db:"tagsList" json:"tagsList,omitempty"`
}

func NewInsertColumnRecordsReq() *InsertColumnRecordsReq {
	return &InsertColumnRecordsReq{}
}

func (p *InsertColumnRecordsReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *InsertColumnRecordsReq) GetPaths() []string {
	return p.Paths
}

func (p *InsertColumnRecordsReq) GetTimestamps() []byte {
	return p.Timestamps
}

func (p *InsertColumnRecordsReq) GetValuesList() [][]byte {
	return p.ValuesList
}

func (p *InsertColumnRecordsReq) GetBitmapList() [][]byte {
	return p.BitmapList
}

func (p *InsertColumnRecordsReq) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var InsertColumnRecordsReq_TagsList_DEFAULT []map[string]string

func (p *InsertColumnRecordsReq) GetTagsList() []map[string]string {
	return p.TagsList
}
func (p *InsertColumnRecordsReq) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *InsertColumnRecordsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false
	var issetTimestamps bool = false
	var issetValuesList bool = false
	var issetBitmapList bool = false
	var issetDataTypeList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetTimestamps = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetValuesList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetBitmapList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetDataTypeList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	if !issetTimestamps {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamps is not set"))
	}
	if !issetValuesList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValuesList is not set"))
	}
	if !issetBitmapList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BitmapList is not set"))
	}
	if !issetDataTypeList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataTypeList is not set"))
	}
	return nil
}

func (p *InsertColumnRecordsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *InsertColumnRecordsReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.Paths = append(p.Paths, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertColumnRecordsReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *InsertColumnRecordsReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.ValuesList = tSlice
	for i := 0; i < size; i++ {
		var _elem3 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.ValuesList = append(p.ValuesList, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertColumnRecordsReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.BitmapList = tSlice
	for i := 0; i < size; i++ {
		var _elem4 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.BitmapList = append(p.BitmapList, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertColumnRecordsReq) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem5 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem5 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertColumnRecordsReq) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem6 := tMap
		for i := 0; i < size; i++ {
			var _key7 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key7 = v
			}
			var _val8 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val8 = v
			}
			_elem6[_key7] = _val8
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertColumnRecordsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InsertColumnRecordsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InsertColumnRecordsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *InsertColumnRecordsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *InsertColumnRecordsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamps: ", p), err)
	}
	if err := oprot.WriteBinary(p.Timestamps); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamps (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamps: ", p), err)
	}
	return err
}

func (p *InsertColumnRecordsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("valuesList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:valuesList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ValuesList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ValuesList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:valuesList: ", p), err)
	}
	return err
}

func (p *InsertColumnRecordsReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bitmapList", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bitmapList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BitmapList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BitmapList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bitmapList: ", p), err)
	}
	return err
}

func (p *InsertColumnRecordsReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dataTypeList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DataTypeList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dataTypeList: ", p), err)
	}
	return err
}

func (p *InsertColumnRecordsReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tagsList: ", p), err)
		}
	}
	return err
}

func (p *InsertColumnRecordsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertColumnRecordsReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
//  - Timestamps
//  - ValuesList
//  - BitmapList
//  - DataTypeList
//  - TagsList
type InsertNonAlignedColumnRecordsReq struct {
	SessionId    int64               `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths        []string            `thrift:"paths,2,required" db:"paths" json:"paths"`
	Timestamps   []byte              `thrift:"timestamps,3,required" db:"timestamps" json:"timestamps"`
	ValuesList   [][]byte            `thrift:"valuesList,4,required" db:"valuesList" json:"valuesList"`
	BitmapList   [][]byte            `thrift:"bitmapList,5,required" db:"bitmapList" json:"bitmapList"`
	DataTypeList []DataType          `thrift:"dataTypeList,6,required" db:"dataTypeList" json:"dataTypeList"`
	TagsList     []map[string]string `thrift:"tagsList,7" db:"tagsList" json:"tagsList,omitempty"`
}

func NewInsertNonAlignedColumnRecordsReq() *InsertNonAlignedColumnRecordsReq {
	return &InsertNonAlignedColumnRecordsReq{}
}

func (p *InsertNonAlignedColumnRecordsReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *InsertNonAlignedColumnRecordsReq) GetPaths() []string {
	return p.Paths
}

func (p *InsertNonAlignedColumnRecordsReq) GetTimestamps() []byte {
	return p.Timestamps
}

func (p *InsertNonAlignedColumnRecordsReq) GetValuesList() [][]byte {
	return p.ValuesList
}

func (p *InsertNonAlignedColumnRecordsReq) GetBitmapList() [][]byte {
	return p.BitmapList
}

func (p *InsertNonAlignedColumnRecordsReq) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var InsertNonAlignedColumnRecordsReq_TagsList_DEFAULT []map[string]string

func (p *InsertNonAlignedColumnRecordsReq) GetTagsList() []map[string]string {
	return p.TagsList
}
func (p *InsertNonAlignedColumnRecordsReq) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *InsertNonAlignedColumnRecordsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false
	var issetTimestamps bool = false
	var issetValuesList bool = false
	var issetBitmapList bool = false
	var issetDataTypeList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetTimestamps = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetValuesList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetBitmapList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetDataTypeList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	if !issetTimestamps {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamps is not set"))
	}
	if !issetValuesList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValuesList is not set"))
	}
	if !issetBitmapList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BitmapList is not set"))
	}
	if !issetDataTypeList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataTypeList is not set"))
	}
	return nil
}

func (p *InsertNonAlignedColumnRecordsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *InsertNonAlignedColumnRecordsReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.Paths = append(p.Paths, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedColumnRecordsReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *InsertNonAlignedColumnRecordsReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.ValuesList = tSlice
	for i := 0; i < size; i++ {
		var _elem10 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.ValuesList = append(p.ValuesList, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedColumnRecordsReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.BitmapList = tSlice
	for i := 0; i < size; i++ {
		var _elem11 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.BitmapList = append(p.BitmapList, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedColumnRecordsReq) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem12 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem12 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedColumnRecordsReq) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem13 := tMap
		for i := 0; i < size; i++ {
			var _key14 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key14 = v
			}
			var _val15 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val15 = v
			}
			_elem13[_key14] = _val15
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedColumnRecordsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InsertNonAlignedColumnRecordsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InsertNonAlignedColumnRecordsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedColumnRecordsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedColumnRecordsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamps: ", p), err)
	}
	if err := oprot.WriteBinary(p.Timestamps); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamps (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamps: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedColumnRecordsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("valuesList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:valuesList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ValuesList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ValuesList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:valuesList: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedColumnRecordsReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bitmapList", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bitmapList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BitmapList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BitmapList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bitmapList: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedColumnRecordsReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dataTypeList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DataTypeList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dataTypeList: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedColumnRecordsReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tagsList: ", p), err)
		}
	}
	return err
}

func (p *InsertNonAlignedColumnRecordsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertNonAlignedColumnRecordsReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
//  - Timestamps
//  - ValuesList
//  - BitmapList
//  - DataTypeList
//  - TagsList
type InsertRowRecordsReq struct {
	SessionId    int64               `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths        []string            `thrift:"paths,2,required" db:"paths" json:"paths"`
	Timestamps   []byte              `thrift:"timestamps,3,required" db:"timestamps" json:"timestamps"`
	ValuesList   [][]byte            `thrift:"valuesList,4,required" db:"valuesList" json:"valuesList"`
	BitmapList   [][]byte            `thrift:"bitmapList,5,required" db:"bitmapList" json:"bitmapList"`
	DataTypeList []DataType          `thrift:"dataTypeList,6,required" db:"dataTypeList" json:"dataTypeList"`
	TagsList     []map[string]string `thrift:"tagsList,7" db:"tagsList" json:"tagsList,omitempty"`
}

func NewInsertRowRecordsReq() *InsertRowRecordsReq {
	return &InsertRowRecordsReq{}
}

func (p *InsertRowRecordsReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *InsertRowRecordsReq) GetPaths() []string {
	return p.Paths
}

func (p *InsertRowRecordsReq) GetTimestamps() []byte {
	return p.Timestamps
}

func (p *InsertRowRecordsReq) GetValuesList() [][]byte {
	return p.ValuesList
}

func (p *InsertRowRecordsReq) GetBitmapList() [][]byte {
	return p.BitmapList
}

func (p *InsertRowRecordsReq) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var InsertRowRecordsReq_TagsList_DEFAULT []map[string]string

func (p *InsertRowRecordsReq) GetTagsList() []map[string]string {
	return p.TagsList
}
func (p *InsertRowRecordsReq) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *InsertRowRecordsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false
	var issetTimestamps bool = false
	var issetValuesList bool = false
	var issetBitmapList bool = false
	var issetDataTypeList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetTimestamps = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetValuesList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetBitmapList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetDataTypeList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	if !issetTimestamps {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamps is not set"))
	}
	if !issetValuesList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValuesList is not set"))
	}
	if !issetBitmapList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BitmapList is not set"))
	}
	if !issetDataTypeList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataTypeList is not set"))
	}
	return nil
}

func (p *InsertRowRecordsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *InsertRowRecordsReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.Paths = append(p.Paths, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertRowRecordsReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *InsertRowRecordsReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.ValuesList = tSlice
	for i := 0; i < size; i++ {
		var _elem17 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem17 = v
		}
		p.ValuesList = append(p.ValuesList, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertRowRecordsReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.BitmapList = tSlice
	for i := 0; i < size; i++ {
		var _elem18 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.BitmapList = append(p.BitmapList, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertRowRecordsReq) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem19 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem19 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertRowRecordsReq) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem20 := tMap
		for i := 0; i < size; i++ {
			var _key21 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key21 = v
			}
			var _val22 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val22 = v
			}
			_elem20[_key21] = _val22
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertRowRecordsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InsertRowRecordsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InsertRowRecordsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *InsertRowRecordsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *InsertRowRecordsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamps: ", p), err)
	}
	if err := oprot.WriteBinary(p.Timestamps); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamps (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamps: ", p), err)
	}
	return err
}

func (p *InsertRowRecordsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("valuesList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:valuesList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ValuesList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ValuesList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:valuesList: ", p), err)
	}
	return err
}

func (p *InsertRowRecordsReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bitmapList", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bitmapList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BitmapList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BitmapList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bitmapList: ", p), err)
	}
	return err
}

func (p *InsertRowRecordsReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dataTypeList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DataTypeList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dataTypeList: ", p), err)
	}
	return err
}

func (p *InsertRowRecordsReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tagsList: ", p), err)
		}
	}
	return err
}

func (p *InsertRowRecordsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertRowRecordsReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
//  - Timestamps
//  - ValuesList
//  - BitmapList
//  - DataTypeList
//  - TagsList
type InsertNonAlignedRowRecordsReq struct {
	SessionId    int64               `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths        []string            `thrift:"paths,2,required" db:"paths" json:"paths"`
	Timestamps   []byte              `thrift:"timestamps,3,required" db:"timestamps" json:"timestamps"`
	ValuesList   [][]byte            `thrift:"valuesList,4,required" db:"valuesList" json:"valuesList"`
	BitmapList   [][]byte            `thrift:"bitmapList,5,required" db:"bitmapList" json:"bitmapList"`
	DataTypeList []DataType          `thrift:"dataTypeList,6,required" db:"dataTypeList" json:"dataTypeList"`
	TagsList     []map[string]string `thrift:"tagsList,7" db:"tagsList" json:"tagsList,omitempty"`
}

func NewInsertNonAlignedRowRecordsReq() *InsertNonAlignedRowRecordsReq {
	return &InsertNonAlignedRowRecordsReq{}
}

func (p *InsertNonAlignedRowRecordsReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *InsertNonAlignedRowRecordsReq) GetPaths() []string {
	return p.Paths
}

func (p *InsertNonAlignedRowRecordsReq) GetTimestamps() []byte {
	return p.Timestamps
}

func (p *InsertNonAlignedRowRecordsReq) GetValuesList() [][]byte {
	return p.ValuesList
}

func (p *InsertNonAlignedRowRecordsReq) GetBitmapList() [][]byte {
	return p.BitmapList
}

func (p *InsertNonAlignedRowRecordsReq) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var InsertNonAlignedRowRecordsReq_TagsList_DEFAULT []map[string]string

func (p *InsertNonAlignedRowRecordsReq) GetTagsList() []map[string]string {
	return p.TagsList
}
func (p *InsertNonAlignedRowRecordsReq) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *InsertNonAlignedRowRecordsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false
	var issetTimestamps bool = false
	var issetValuesList bool = false
	var issetBitmapList bool = false
	var issetDataTypeList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetTimestamps = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetValuesList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetBitmapList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetDataTypeList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	if !issetTimestamps {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamps is not set"))
	}
	if !issetValuesList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValuesList is not set"))
	}
	if !issetBitmapList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BitmapList is not set"))
	}
	if !issetDataTypeList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataTypeList is not set"))
	}
	return nil
}

func (p *InsertNonAlignedRowRecordsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *InsertNonAlignedRowRecordsReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem23 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem23 = v
		}
		p.Paths = append(p.Paths, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedRowRecordsReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *InsertNonAlignedRowRecordsReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.ValuesList = tSlice
	for i := 0; i < size; i++ {
		var _elem24 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem24 = v
		}
		p.ValuesList = append(p.ValuesList, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedRowRecordsReq) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.BitmapList = tSlice
	for i := 0; i < size; i++ {
		var _elem25 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem25 = v
		}
		p.BitmapList = append(p.BitmapList, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedRowRecordsReq) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem26 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem26 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedRowRecordsReq) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem27 := tMap
		for i := 0; i < size; i++ {
			var _key28 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key28 = v
			}
			var _val29 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val29 = v
			}
			_elem27[_key28] = _val29
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InsertNonAlignedRowRecordsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InsertNonAlignedRowRecordsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InsertNonAlignedRowRecordsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedRowRecordsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedRowRecordsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamps: ", p), err)
	}
	if err := oprot.WriteBinary(p.Timestamps); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamps (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamps: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedRowRecordsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("valuesList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:valuesList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ValuesList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ValuesList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:valuesList: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedRowRecordsReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bitmapList", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bitmapList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BitmapList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BitmapList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bitmapList: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedRowRecordsReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dataTypeList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.DataTypeList {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dataTypeList: ", p), err)
	}
	return err
}

func (p *InsertNonAlignedRowRecordsReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tagsList: ", p), err)
		}
	}
	return err
}

func (p *InsertNonAlignedRowRecordsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertNonAlignedRowRecordsReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
//  - StartTime
//  - EndTime
type DeleteDataInColumnsReq struct {
	SessionId int64    `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths     []string `thrift:"paths,2,required" db:"paths" json:"paths"`
	StartTime int64    `thrift:"startTime,3,required" db:"startTime" json:"startTime"`
	EndTime   int64    `thrift:"endTime,4,required" db:"endTime" json:"endTime"`
}

func NewDeleteDataInColumnsReq() *DeleteDataInColumnsReq {
	return &DeleteDataInColumnsReq{}
}

func (p *DeleteDataInColumnsReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *DeleteDataInColumnsReq) GetPaths() []string {
	return p.Paths
}

func (p *DeleteDataInColumnsReq) GetStartTime() int64 {
	return p.StartTime
}

func (p *DeleteDataInColumnsReq) GetEndTime() int64 {
	return p.EndTime
}
func (p *DeleteDataInColumnsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetStartTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetEndTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	if !issetStartTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartTime is not set"))
	}
	if !issetEndTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EndTime is not set"))
	}
	return nil
}

func (p *DeleteDataInColumnsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *DeleteDataInColumnsReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem30 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem30 = v
		}
		p.Paths = append(p.Paths, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DeleteDataInColumnsReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *DeleteDataInColumnsReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *DeleteDataInColumnsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteDataInColumnsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteDataInColumnsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *DeleteDataInColumnsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *DeleteDataInColumnsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err)
	}
	return err
}

func (p *DeleteDataInColumnsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err)
	}
	return err
}

func (p *DeleteDataInColumnsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDataInColumnsReq(%+v)", *p)
}

// Attributes:
//  - Timestamps
//  - ValuesList
//  - BitmapList
type QueryDataSet struct {
	Timestamps []byte   `thrift:"timestamps,1,required" db:"timestamps" json:"timestamps"`
	ValuesList [][]byte `thrift:"valuesList,2,required" db:"valuesList" json:"valuesList"`
	BitmapList [][]byte `thrift:"bitmapList,3,required" db:"bitmapList" json:"bitmapList"`
}

func NewQueryDataSet() *QueryDataSet {
	return &QueryDataSet{}
}

func (p *QueryDataSet) GetTimestamps() []byte {
	return p.Timestamps
}

func (p *QueryDataSet) GetValuesList() [][]byte {
	return p.ValuesList
}

func (p *QueryDataSet) GetBitmapList() [][]byte {
	return p.BitmapList
}
func (p *QueryDataSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTimestamps bool = false
	var issetValuesList bool = false
	var issetBitmapList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetTimestamps = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetValuesList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetBitmapList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTimestamps {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamps is not set"))
	}
	if !issetValuesList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValuesList is not set"))
	}
	if !issetBitmapList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BitmapList is not set"))
	}
	return nil
}

func (p *QueryDataSet) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *QueryDataSet) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.ValuesList = tSlice
	for i := 0; i < size; i++ {
		var _elem31 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem31 = v
		}
		p.ValuesList = append(p.ValuesList, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryDataSet) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.BitmapList = tSlice
	for i := 0; i < size; i++ {
		var _elem32 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem32 = v
		}
		p.BitmapList = append(p.BitmapList, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryDataSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryDataSet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryDataSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamps: ", p), err)
	}
	if err := oprot.WriteBinary(p.Timestamps); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamps (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamps: ", p), err)
	}
	return err
}

func (p *QueryDataSet) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("valuesList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:valuesList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ValuesList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ValuesList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:valuesList: ", p), err)
	}
	return err
}

func (p *QueryDataSet) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bitmapList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bitmapList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BitmapList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BitmapList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bitmapList: ", p), err)
	}
	return err
}

func (p *QueryDataSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryDataSet(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
//  - StartTime
//  - EndTime
//  - TagsList
type QueryDataReq struct {
	SessionId int64               `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths     []string            `thrift:"paths,2,required" db:"paths" json:"paths"`
	StartTime int64               `thrift:"startTime,3,required" db:"startTime" json:"startTime"`
	EndTime   int64               `thrift:"endTime,4,required" db:"endTime" json:"endTime"`
	TagsList  map[string][]string `thrift:"tagsList,5" db:"tagsList" json:"tagsList,omitempty"`
}

func NewQueryDataReq() *QueryDataReq {
	return &QueryDataReq{}
}

func (p *QueryDataReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *QueryDataReq) GetPaths() []string {
	return p.Paths
}

func (p *QueryDataReq) GetStartTime() int64 {
	return p.StartTime
}

func (p *QueryDataReq) GetEndTime() int64 {
	return p.EndTime
}

var QueryDataReq_TagsList_DEFAULT map[string][]string

func (p *QueryDataReq) GetTagsList() map[string][]string {
	return p.TagsList
}
func (p *QueryDataReq) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *QueryDataReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetStartTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetEndTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	if !issetStartTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartTime is not set"))
	}
	if !issetEndTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EndTime is not set"))
	}
	return nil
}

func (p *QueryDataReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *QueryDataReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem33 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem33 = v
		}
		p.Paths = append(p.Paths, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryDataReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *QueryDataReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *QueryDataReq) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]string, size)
	p.TagsList = tMap
	for i := 0; i < size; i++ {
		var _key34 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key34 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]string, 0, size)
		_val35 := tSlice
		for i := 0; i < size; i++ {
			var _elem36 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem36 = v
			}
			_val35 = append(_val35, _elem36)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.TagsList[_key34] = _val35
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *QueryDataReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryDataReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryDataReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *QueryDataReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *QueryDataReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err)
	}
	return err
}

func (p *QueryDataReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err)
	}
	return err
}

func (p *QueryDataReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tagsList: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TagsList {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tagsList: ", p), err)
		}
	}
	return err
}

func (p *QueryDataReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryDataReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Paths
//  - TagsList
//  - DataTypeList
//  - QueryDataSet
type QueryDataResp struct {
	Status       *Status             `thrift:"status,1,required" db:"status" json:"status"`
	Paths        []string            `thrift:"paths,2" db:"paths" json:"paths,omitempty"`
	TagsList     []map[string]string `thrift:"tagsList,3" db:"tagsList" json:"tagsList,omitempty"`
	DataTypeList []DataType          `thrift:"dataTypeList,4" db:"dataTypeList" json:"dataTypeList,omitempty"`
	QueryDataSet *QueryDataSet       `thrift:"queryDataSet,5" db:"queryDataSet" json:"queryDataSet,omitempty"`
}

func NewQueryDataResp() *QueryDataResp {
	return &QueryDataResp{}
}

var QueryDataResp_Status_DEFAULT *Status

func (p *QueryDataResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return QueryDataResp_Status_DEFAULT
	}
	return p.Status
}

var QueryDataResp_Paths_DEFAULT []string

func (p *QueryDataResp) GetPaths() []string {
	return p.Paths
}

var QueryDataResp_TagsList_DEFAULT []map[string]string

func (p *QueryDataResp) GetTagsList() []map[string]string {
	return p.TagsList
}

var QueryDataResp_DataTypeList_DEFAULT []DataType

func (p *QueryDataResp) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var QueryDataResp_QueryDataSet_DEFAULT *QueryDataSet

func (p *QueryDataResp) GetQueryDataSet() *QueryDataSet {
	if !p.IsSetQueryDataSet() {
		return QueryDataResp_QueryDataSet_DEFAULT
	}
	return p.QueryDataSet
}
func (p *QueryDataResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *QueryDataResp) IsSetPaths() bool {
	return p.Paths != nil
}

func (p *QueryDataResp) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *QueryDataResp) IsSetDataTypeList() bool {
	return p.DataTypeList != nil
}

func (p *QueryDataResp) IsSetQueryDataSet() bool {
	return p.QueryDataSet != nil
}

func (p *QueryDataResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *QueryDataResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *QueryDataResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem37 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem37 = v
		}
		p.Paths = append(p.Paths, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryDataResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem38 := tMap
		for i := 0; i < size; i++ {
			var _key39 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key39 = v
			}
			var _val40 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val40 = v
			}
			_elem38[_key39] = _val40
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryDataResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem41 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem41 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryDataResp) ReadField5(iprot thrift.TProtocol) error {
	p.QueryDataSet = &QueryDataSet{}
	if err := p.QueryDataSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryDataSet), err)
	}
	return nil
}

func (p *QueryDataResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryDataResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryDataResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *QueryDataResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaths() {
		if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Paths {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
		}
	}
	return err
}

func (p *QueryDataResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tagsList: ", p), err)
		}
	}
	return err
}

func (p *QueryDataResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataTypeList() {
		if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dataTypeList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.DataTypeList {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dataTypeList: ", p), err)
		}
	}
	return err
}

func (p *QueryDataResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryDataSet() {
		if err := oprot.WriteFieldBegin("queryDataSet", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:queryDataSet: ", p), err)
		}
		if err := p.QueryDataSet.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryDataSet), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:queryDataSet: ", p), err)
		}
	}
	return err
}

func (p *QueryDataResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryDataResp(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - StorageEngines
type AddStorageEnginesReq struct {
	SessionId      int64            `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	StorageEngines []*StorageEngine `thrift:"storageEngines,2,required" db:"storageEngines" json:"storageEngines"`
}

func NewAddStorageEnginesReq() *AddStorageEnginesReq {
	return &AddStorageEnginesReq{}
}

func (p *AddStorageEnginesReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *AddStorageEnginesReq) GetStorageEngines() []*StorageEngine {
	return p.StorageEngines
}
func (p *AddStorageEnginesReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetStorageEngines bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetStorageEngines = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetStorageEngines {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageEngines is not set"))
	}
	return nil
}

func (p *AddStorageEnginesReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *AddStorageEnginesReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*StorageEngine, 0, size)
	p.StorageEngines = tSlice
	for i := 0; i < size; i++ {
		_elem42 := &StorageEngine{}
		if err := _elem42.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
		}
		p.StorageEngines = append(p.StorageEngines, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AddStorageEnginesReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddStorageEnginesReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddStorageEnginesReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *AddStorageEnginesReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("storageEngines", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:storageEngines: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StorageEngines)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.StorageEngines {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:storageEngines: ", p), err)
	}
	return err
}

func (p *AddStorageEnginesReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddStorageEnginesReq(%+v)", *p)
}

// Attributes:
//  - IP
//  - Port
//  - Type
//  - ExtraParams
type StorageEngine struct {
	IP          string            `thrift:"ip,1,required" db:"ip" json:"ip"`
	Port        int32             `thrift:"port,2,required" db:"port" json:"port"`
	Type        string            `thrift:"type,3,required" db:"type" json:"type"`
	ExtraParams map[string]string `thrift:"extraParams,4,required" db:"extraParams" json:"extraParams"`
}

func NewStorageEngine() *StorageEngine {
	return &StorageEngine{}
}

func (p *StorageEngine) GetIP() string {
	return p.IP
}

func (p *StorageEngine) GetPort() int32 {
	return p.Port
}

func (p *StorageEngine) GetType() string {
	return p.Type
}

func (p *StorageEngine) GetExtraParams() map[string]string {
	return p.ExtraParams
}
func (p *StorageEngine) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIP bool = false
	var issetPort bool = false
	var issetType bool = false
	var issetExtraParams bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetIP = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPort = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetExtraParams = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetExtraParams {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExtraParams is not set"))
	}
	return nil
}

func (p *StorageEngine) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *StorageEngine) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *StorageEngine) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *StorageEngine) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtraParams = tMap
	for i := 0; i < size; i++ {
		var _key43 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key43 = v
		}
		var _val44 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val44 = v
		}
		p.ExtraParams[_key43] = _val44
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *StorageEngine) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StorageEngine"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageEngine) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *StorageEngine) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err)
	}
	return err
}

func (p *StorageEngine) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *StorageEngine) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extraParams", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraParams: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtraParams)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.ExtraParams {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraParams: ", p), err)
	}
	return err
}

func (p *StorageEngine) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageEngine(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
//  - StartTime
//  - EndTime
//  - AggregateType
//  - TagsList
type AggregateQueryReq struct {
	SessionId     int64               `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths         []string            `thrift:"paths,2,required" db:"paths" json:"paths"`
	StartTime     int64               `thrift:"startTime,3,required" db:"startTime" json:"startTime"`
	EndTime       int64               `thrift:"endTime,4,required" db:"endTime" json:"endTime"`
	AggregateType AggregateType       `thrift:"aggregateType,5,required" db:"aggregateType" json:"aggregateType"`
	TagsList      map[string][]string `thrift:"tagsList,6" db:"tagsList" json:"tagsList,omitempty"`
}

func NewAggregateQueryReq() *AggregateQueryReq {
	return &AggregateQueryReq{}
}

func (p *AggregateQueryReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *AggregateQueryReq) GetPaths() []string {
	return p.Paths
}

func (p *AggregateQueryReq) GetStartTime() int64 {
	return p.StartTime
}

func (p *AggregateQueryReq) GetEndTime() int64 {
	return p.EndTime
}

func (p *AggregateQueryReq) GetAggregateType() AggregateType {
	return p.AggregateType
}

var AggregateQueryReq_TagsList_DEFAULT map[string][]string

func (p *AggregateQueryReq) GetTagsList() map[string][]string {
	return p.TagsList
}
func (p *AggregateQueryReq) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *AggregateQueryReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false
	var issetAggregateType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetStartTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetEndTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetAggregateType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	if !issetStartTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartTime is not set"))
	}
	if !issetEndTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EndTime is not set"))
	}
	if !issetAggregateType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AggregateType is not set"))
	}
	return nil
}

func (p *AggregateQueryReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *AggregateQueryReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem45 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem45 = v
		}
		p.Paths = append(p.Paths, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AggregateQueryReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *AggregateQueryReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *AggregateQueryReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := AggregateType(v)
		p.AggregateType = temp
	}
	return nil
}

func (p *AggregateQueryReq) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]string, size)
	p.TagsList = tMap
	for i := 0; i < size; i++ {
		var _key46 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key46 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]string, 0, size)
		_val47 := tSlice
		for i := 0; i < size; i++ {
			var _elem48 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem48 = v
			}
			_val47 = append(_val47, _elem48)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.TagsList[_key46] = _val47
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AggregateQueryReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AggregateQueryReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AggregateQueryReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *AggregateQueryReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *AggregateQueryReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err)
	}
	return err
}

func (p *AggregateQueryReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err)
	}
	return err
}

func (p *AggregateQueryReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("aggregateType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:aggregateType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AggregateType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.aggregateType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:aggregateType: ", p), err)
	}
	return err
}

func (p *AggregateQueryReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tagsList: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TagsList {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tagsList: ", p), err)
		}
	}
	return err
}

func (p *AggregateQueryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AggregateQueryReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Paths
//  - TagsList
//  - DataTypeList
//  - Timestamps
//  - ValuesList
type AggregateQueryResp struct {
	Status       *Status             `thrift:"status,1,required" db:"status" json:"status"`
	Paths        []string            `thrift:"paths,2" db:"paths" json:"paths,omitempty"`
	TagsList     []map[string]string `thrift:"tagsList,3" db:"tagsList" json:"tagsList,omitempty"`
	DataTypeList []DataType          `thrift:"dataTypeList,4" db:"dataTypeList" json:"dataTypeList,omitempty"`
	Timestamps   []byte              `thrift:"timestamps,5" db:"timestamps" json:"timestamps,omitempty"`
	ValuesList   []byte              `thrift:"valuesList,6" db:"valuesList" json:"valuesList,omitempty"`
}

func NewAggregateQueryResp() *AggregateQueryResp {
	return &AggregateQueryResp{}
}

var AggregateQueryResp_Status_DEFAULT *Status

func (p *AggregateQueryResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return AggregateQueryResp_Status_DEFAULT
	}
	return p.Status
}

var AggregateQueryResp_Paths_DEFAULT []string

func (p *AggregateQueryResp) GetPaths() []string {
	return p.Paths
}

var AggregateQueryResp_TagsList_DEFAULT []map[string]string

func (p *AggregateQueryResp) GetTagsList() []map[string]string {
	return p.TagsList
}

var AggregateQueryResp_DataTypeList_DEFAULT []DataType

func (p *AggregateQueryResp) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var AggregateQueryResp_Timestamps_DEFAULT []byte

func (p *AggregateQueryResp) GetTimestamps() []byte {
	return p.Timestamps
}

var AggregateQueryResp_ValuesList_DEFAULT []byte

func (p *AggregateQueryResp) GetValuesList() []byte {
	return p.ValuesList
}
func (p *AggregateQueryResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *AggregateQueryResp) IsSetPaths() bool {
	return p.Paths != nil
}

func (p *AggregateQueryResp) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *AggregateQueryResp) IsSetDataTypeList() bool {
	return p.DataTypeList != nil
}

func (p *AggregateQueryResp) IsSetTimestamps() bool {
	return p.Timestamps != nil
}

func (p *AggregateQueryResp) IsSetValuesList() bool {
	return p.ValuesList != nil
}

func (p *AggregateQueryResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *AggregateQueryResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *AggregateQueryResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem49 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem49 = v
		}
		p.Paths = append(p.Paths, _elem49)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AggregateQueryResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem50 := tMap
		for i := 0; i < size; i++ {
			var _key51 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key51 = v
			}
			var _val52 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val52 = v
			}
			_elem50[_key51] = _val52
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem50)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AggregateQueryResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem53 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem53 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem53)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AggregateQueryResp) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *AggregateQueryResp) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ValuesList = v
	}
	return nil
}

func (p *AggregateQueryResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AggregateQueryResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AggregateQueryResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *AggregateQueryResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaths() {
		if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Paths {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
		}
	}
	return err
}

func (p *AggregateQueryResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tagsList: ", p), err)
		}
	}
	return err
}

func (p *AggregateQueryResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataTypeList() {
		if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dataTypeList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.DataTypeList {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dataTypeList: ", p), err)
		}
	}
	return err
}

func (p *AggregateQueryResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamps() {
		if err := oprot.WriteFieldBegin("timestamps", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamps: ", p), err)
		}
		if err := oprot.WriteBinary(p.Timestamps); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamps (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamps: ", p), err)
		}
	}
	return err
}

func (p *AggregateQueryResp) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetValuesList() {
		if err := oprot.WriteFieldBegin("valuesList", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:valuesList: ", p), err)
		}
		if err := oprot.WriteBinary(p.ValuesList); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.valuesList (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:valuesList: ", p), err)
		}
	}
	return err
}

func (p *AggregateQueryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AggregateQueryResp(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
//  - StartTime
//  - TagsList
type LastQueryReq struct {
	SessionId int64               `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths     []string            `thrift:"paths,2,required" db:"paths" json:"paths"`
	StartTime int64               `thrift:"startTime,3,required" db:"startTime" json:"startTime"`
	TagsList  map[string][]string `thrift:"tagsList,4" db:"tagsList" json:"tagsList,omitempty"`
}

func NewLastQueryReq() *LastQueryReq {
	return &LastQueryReq{}
}

func (p *LastQueryReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *LastQueryReq) GetPaths() []string {
	return p.Paths
}

func (p *LastQueryReq) GetStartTime() int64 {
	return p.StartTime
}

var LastQueryReq_TagsList_DEFAULT map[string][]string

func (p *LastQueryReq) GetTagsList() map[string][]string {
	return p.TagsList
}
func (p *LastQueryReq) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *LastQueryReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false
	var issetStartTime bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetStartTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	if !issetStartTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartTime is not set"))
	}
	return nil
}

func (p *LastQueryReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *LastQueryReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem54 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem54 = v
		}
		p.Paths = append(p.Paths, _elem54)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LastQueryReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *LastQueryReq) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]string, size)
	p.TagsList = tMap
	for i := 0; i < size; i++ {
		var _key55 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key55 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]string, 0, size)
		_val56 := tSlice
		for i := 0; i < size; i++ {
			var _elem57 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem57 = v
			}
			_val56 = append(_val56, _elem57)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.TagsList[_key55] = _val56
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LastQueryReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LastQueryReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LastQueryReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *LastQueryReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *LastQueryReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err)
	}
	return err
}

func (p *LastQueryReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tagsList: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TagsList {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tagsList: ", p), err)
		}
	}
	return err
}

func (p *LastQueryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LastQueryReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Paths
//  - TagsList
//  - DataTypeList
//  - QueryDataSet
type LastQueryResp struct {
	Status       *Status             `thrift:"status,1,required" db:"status" json:"status"`
	Paths        []string            `thrift:"paths,2" db:"paths" json:"paths,omitempty"`
	TagsList     []map[string]string `thrift:"tagsList,3" db:"tagsList" json:"tagsList,omitempty"`
	DataTypeList []DataType          `thrift:"dataTypeList,4" db:"dataTypeList" json:"dataTypeList,omitempty"`
	QueryDataSet *QueryDataSet       `thrift:"queryDataSet,5" db:"queryDataSet" json:"queryDataSet,omitempty"`
}

func NewLastQueryResp() *LastQueryResp {
	return &LastQueryResp{}
}

var LastQueryResp_Status_DEFAULT *Status

func (p *LastQueryResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return LastQueryResp_Status_DEFAULT
	}
	return p.Status
}

var LastQueryResp_Paths_DEFAULT []string

func (p *LastQueryResp) GetPaths() []string {
	return p.Paths
}

var LastQueryResp_TagsList_DEFAULT []map[string]string

func (p *LastQueryResp) GetTagsList() []map[string]string {
	return p.TagsList
}

var LastQueryResp_DataTypeList_DEFAULT []DataType

func (p *LastQueryResp) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var LastQueryResp_QueryDataSet_DEFAULT *QueryDataSet

func (p *LastQueryResp) GetQueryDataSet() *QueryDataSet {
	if !p.IsSetQueryDataSet() {
		return LastQueryResp_QueryDataSet_DEFAULT
	}
	return p.QueryDataSet
}
func (p *LastQueryResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *LastQueryResp) IsSetPaths() bool {
	return p.Paths != nil
}

func (p *LastQueryResp) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *LastQueryResp) IsSetDataTypeList() bool {
	return p.DataTypeList != nil
}

func (p *LastQueryResp) IsSetQueryDataSet() bool {
	return p.QueryDataSet != nil
}

func (p *LastQueryResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *LastQueryResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *LastQueryResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem58 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem58 = v
		}
		p.Paths = append(p.Paths, _elem58)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LastQueryResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem59 := tMap
		for i := 0; i < size; i++ {
			var _key60 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key60 = v
			}
			var _val61 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val61 = v
			}
			_elem59[_key60] = _val61
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem59)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LastQueryResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem62 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem62 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem62)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LastQueryResp) ReadField5(iprot thrift.TProtocol) error {
	p.QueryDataSet = &QueryDataSet{}
	if err := p.QueryDataSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryDataSet), err)
	}
	return nil
}

func (p *LastQueryResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LastQueryResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LastQueryResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *LastQueryResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaths() {
		if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Paths {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
		}
	}
	return err
}

func (p *LastQueryResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tagsList: ", p), err)
		}
	}
	return err
}

func (p *LastQueryResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataTypeList() {
		if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dataTypeList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.DataTypeList {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dataTypeList: ", p), err)
		}
	}
	return err
}

func (p *LastQueryResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryDataSet() {
		if err := oprot.WriteFieldBegin("queryDataSet", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:queryDataSet: ", p), err)
		}
		if err := p.QueryDataSet.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryDataSet), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:queryDataSet: ", p), err)
		}
	}
	return err
}

func (p *LastQueryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LastQueryResp(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Paths
//  - StartTime
//  - EndTime
//  - AggregateType
//  - Precision
//  - TagsList
type DownsampleQueryReq struct {
	SessionId     int64               `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Paths         []string            `thrift:"paths,2,required" db:"paths" json:"paths"`
	StartTime     int64               `thrift:"startTime,3,required" db:"startTime" json:"startTime"`
	EndTime       int64               `thrift:"endTime,4,required" db:"endTime" json:"endTime"`
	AggregateType AggregateType       `thrift:"aggregateType,5,required" db:"aggregateType" json:"aggregateType"`
	Precision     int64               `thrift:"precision,6,required" db:"precision" json:"precision"`
	TagsList      map[string][]string `thrift:"tagsList,7" db:"tagsList" json:"tagsList,omitempty"`
}

func NewDownsampleQueryReq() *DownsampleQueryReq {
	return &DownsampleQueryReq{}
}

func (p *DownsampleQueryReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *DownsampleQueryReq) GetPaths() []string {
	return p.Paths
}

func (p *DownsampleQueryReq) GetStartTime() int64 {
	return p.StartTime
}

func (p *DownsampleQueryReq) GetEndTime() int64 {
	return p.EndTime
}

func (p *DownsampleQueryReq) GetAggregateType() AggregateType {
	return p.AggregateType
}

func (p *DownsampleQueryReq) GetPrecision() int64 {
	return p.Precision
}

var DownsampleQueryReq_TagsList_DEFAULT map[string][]string

func (p *DownsampleQueryReq) GetTagsList() map[string][]string {
	return p.TagsList
}
func (p *DownsampleQueryReq) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *DownsampleQueryReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetPaths bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false
	var issetAggregateType bool = false
	var issetPrecision bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPaths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetStartTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetEndTime = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetAggregateType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
				issetPrecision = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetPaths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Paths is not set"))
	}
	if !issetStartTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StartTime is not set"))
	}
	if !issetEndTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EndTime is not set"))
	}
	if !issetAggregateType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AggregateType is not set"))
	}
	if !issetPrecision {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Precision is not set"))
	}
	return nil
}

func (p *DownsampleQueryReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *DownsampleQueryReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem63 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem63 = v
		}
		p.Paths = append(p.Paths, _elem63)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DownsampleQueryReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *DownsampleQueryReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *DownsampleQueryReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := AggregateType(v)
		p.AggregateType = temp
	}
	return nil
}

func (p *DownsampleQueryReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Precision = v
	}
	return nil
}

func (p *DownsampleQueryReq) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]string, size)
	p.TagsList = tMap
	for i := 0; i < size; i++ {
		var _key64 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key64 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]string, 0, size)
		_val65 := tSlice
		for i := 0; i < size; i++ {
			var _elem66 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem66 = v
			}
			_val65 = append(_val65, _elem66)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.TagsList[_key64] = _val65
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *DownsampleQueryReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DownsampleQueryReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DownsampleQueryReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *DownsampleQueryReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Paths {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
	}
	return err
}

func (p *DownsampleQueryReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err)
	}
	return err
}

func (p *DownsampleQueryReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err)
	}
	return err
}

func (p *DownsampleQueryReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("aggregateType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:aggregateType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AggregateType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.aggregateType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:aggregateType: ", p), err)
	}
	return err
}

func (p *DownsampleQueryReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("precision", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:precision: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Precision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.precision (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:precision: ", p), err)
	}
	return err
}

func (p *DownsampleQueryReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tagsList: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.TagsList {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tagsList: ", p), err)
		}
	}
	return err
}

func (p *DownsampleQueryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownsampleQueryReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Paths
//  - TagsList
//  - DataTypeList
//  - QueryDataSet
type DownsampleQueryResp struct {
	Status       *Status             `thrift:"status,1,required" db:"status" json:"status"`
	Paths        []string            `thrift:"paths,2" db:"paths" json:"paths,omitempty"`
	TagsList     []map[string]string `thrift:"tagsList,3" db:"tagsList" json:"tagsList,omitempty"`
	DataTypeList []DataType          `thrift:"dataTypeList,4" db:"dataTypeList" json:"dataTypeList,omitempty"`
	QueryDataSet *QueryDataSet       `thrift:"queryDataSet,5" db:"queryDataSet" json:"queryDataSet,omitempty"`
}

func NewDownsampleQueryResp() *DownsampleQueryResp {
	return &DownsampleQueryResp{}
}

var DownsampleQueryResp_Status_DEFAULT *Status

func (p *DownsampleQueryResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return DownsampleQueryResp_Status_DEFAULT
	}
	return p.Status
}

var DownsampleQueryResp_Paths_DEFAULT []string

func (p *DownsampleQueryResp) GetPaths() []string {
	return p.Paths
}

var DownsampleQueryResp_TagsList_DEFAULT []map[string]string

func (p *DownsampleQueryResp) GetTagsList() []map[string]string {
	return p.TagsList
}

var DownsampleQueryResp_DataTypeList_DEFAULT []DataType

func (p *DownsampleQueryResp) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var DownsampleQueryResp_QueryDataSet_DEFAULT *QueryDataSet

func (p *DownsampleQueryResp) GetQueryDataSet() *QueryDataSet {
	if !p.IsSetQueryDataSet() {
		return DownsampleQueryResp_QueryDataSet_DEFAULT
	}
	return p.QueryDataSet
}
func (p *DownsampleQueryResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *DownsampleQueryResp) IsSetPaths() bool {
	return p.Paths != nil
}

func (p *DownsampleQueryResp) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *DownsampleQueryResp) IsSetDataTypeList() bool {
	return p.DataTypeList != nil
}

func (p *DownsampleQueryResp) IsSetQueryDataSet() bool {
	return p.QueryDataSet != nil
}

func (p *DownsampleQueryResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *DownsampleQueryResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *DownsampleQueryResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem67 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem67 = v
		}
		p.Paths = append(p.Paths, _elem67)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DownsampleQueryResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem68 := tMap
		for i := 0; i < size; i++ {
			var _key69 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key69 = v
			}
			var _val70 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val70 = v
			}
			_elem68[_key69] = _val70
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem68)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DownsampleQueryResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem71 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem71 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem71)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DownsampleQueryResp) ReadField5(iprot thrift.TProtocol) error {
	p.QueryDataSet = &QueryDataSet{}
	if err := p.QueryDataSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryDataSet), err)
	}
	return nil
}

func (p *DownsampleQueryResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DownsampleQueryResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DownsampleQueryResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *DownsampleQueryResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaths() {
		if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Paths {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
		}
	}
	return err
}

func (p *DownsampleQueryResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tagsList: ", p), err)
		}
	}
	return err
}

func (p *DownsampleQueryResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataTypeList() {
		if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dataTypeList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.DataTypeList {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dataTypeList: ", p), err)
		}
	}
	return err
}

func (p *DownsampleQueryResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryDataSet() {
		if err := oprot.WriteFieldBegin("queryDataSet", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:queryDataSet: ", p), err)
		}
		if err := p.QueryDataSet.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryDataSet), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:queryDataSet: ", p), err)
		}
	}
	return err
}

func (p *DownsampleQueryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownsampleQueryResp(%+v)", *p)
}

// Attributes:
//  - SessionId
type ShowColumnsReq struct {
	SessionId int64 `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
}

func NewShowColumnsReq() *ShowColumnsReq {
	return &ShowColumnsReq{}
}

func (p *ShowColumnsReq) GetSessionId() int64 {
	return p.SessionId
}
func (p *ShowColumnsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	return nil
}

func (p *ShowColumnsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *ShowColumnsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShowColumnsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShowColumnsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *ShowColumnsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowColumnsReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Paths
//  - TagsList
//  - DataTypeList
type ShowColumnsResp struct {
	Status       *Status             `thrift:"status,1,required" db:"status" json:"status"`
	Paths        []string            `thrift:"paths,2" db:"paths" json:"paths,omitempty"`
	TagsList     []map[string]string `thrift:"tagsList,3" db:"tagsList" json:"tagsList,omitempty"`
	DataTypeList []DataType          `thrift:"dataTypeList,4" db:"dataTypeList" json:"dataTypeList,omitempty"`
}

func NewShowColumnsResp() *ShowColumnsResp {
	return &ShowColumnsResp{}
}

var ShowColumnsResp_Status_DEFAULT *Status

func (p *ShowColumnsResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return ShowColumnsResp_Status_DEFAULT
	}
	return p.Status
}

var ShowColumnsResp_Paths_DEFAULT []string

func (p *ShowColumnsResp) GetPaths() []string {
	return p.Paths
}

var ShowColumnsResp_TagsList_DEFAULT []map[string]string

func (p *ShowColumnsResp) GetTagsList() []map[string]string {
	return p.TagsList
}

var ShowColumnsResp_DataTypeList_DEFAULT []DataType

func (p *ShowColumnsResp) GetDataTypeList() []DataType {
	return p.DataTypeList
}
func (p *ShowColumnsResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ShowColumnsResp) IsSetPaths() bool {
	return p.Paths != nil
}

func (p *ShowColumnsResp) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *ShowColumnsResp) IsSetDataTypeList() bool {
	return p.DataTypeList != nil
}

func (p *ShowColumnsResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *ShowColumnsResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *ShowColumnsResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem72 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem72 = v
		}
		p.Paths = append(p.Paths, _elem72)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ShowColumnsResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem73 := tMap
		for i := 0; i < size; i++ {
			var _key74 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key74 = v
			}
			var _val75 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val75 = v
			}
			_elem73[_key74] = _val75
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem73)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ShowColumnsResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem76 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem76 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem76)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ShowColumnsResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShowColumnsResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShowColumnsResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *ShowColumnsResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaths() {
		if err := oprot.WriteFieldBegin("paths", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:paths: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Paths {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:paths: ", p), err)
		}
	}
	return err
}

func (p *ShowColumnsResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tagsList: ", p), err)
		}
	}
	return err
}

func (p *ShowColumnsResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataTypeList() {
		if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dataTypeList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.DataTypeList {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dataTypeList: ", p), err)
		}
	}
	return err
}

func (p *ShowColumnsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowColumnsResp(%+v)", *p)
}

// Attributes:
//  - SessionId
type GetReplicaNumReq struct {
	SessionId int64 `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
}

func NewGetReplicaNumReq() *GetReplicaNumReq {
	return &GetReplicaNumReq{}
}

func (p *GetReplicaNumReq) GetSessionId() int64 {
	return p.SessionId
}
func (p *GetReplicaNumReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	return nil
}

func (p *GetReplicaNumReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *GetReplicaNumReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReplicaNumReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetReplicaNumReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *GetReplicaNumReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReplicaNumReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - ReplicaNum
type GetReplicaNumResp struct {
	Status     *Status `thrift:"status,1,required" db:"status" json:"status"`
	ReplicaNum *int32  `thrift:"replicaNum,2" db:"replicaNum" json:"replicaNum,omitempty"`
}

func NewGetReplicaNumResp() *GetReplicaNumResp {
	return &GetReplicaNumResp{}
}

var GetReplicaNumResp_Status_DEFAULT *Status

func (p *GetReplicaNumResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return GetReplicaNumResp_Status_DEFAULT
	}
	return p.Status
}

var GetReplicaNumResp_ReplicaNum_DEFAULT int32

func (p *GetReplicaNumResp) GetReplicaNum() int32 {
	if !p.IsSetReplicaNum() {
		return GetReplicaNumResp_ReplicaNum_DEFAULT
	}
	return *p.ReplicaNum
}
func (p *GetReplicaNumResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetReplicaNumResp) IsSetReplicaNum() bool {
	return p.ReplicaNum != nil
}

func (p *GetReplicaNumResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *GetReplicaNumResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *GetReplicaNumResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReplicaNum = &v
	}
	return nil
}

func (p *GetReplicaNumResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetReplicaNumResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetReplicaNumResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *GetReplicaNumResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaNum() {
		if err := oprot.WriteFieldBegin("replicaNum", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:replicaNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ReplicaNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replicaNum (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:replicaNum: ", p), err)
		}
	}
	return err
}

func (p *GetReplicaNumResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReplicaNumResp(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Statement
type ExecuteSqlReq struct {
	SessionId int64  `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Statement string `thrift:"statement,2,required" db:"statement" json:"statement"`
}

func NewExecuteSqlReq() *ExecuteSqlReq {
	return &ExecuteSqlReq{}
}

func (p *ExecuteSqlReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *ExecuteSqlReq) GetStatement() string {
	return p.Statement
}
func (p *ExecuteSqlReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetStatement bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetStatement = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetStatement {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Statement is not set"))
	}
	return nil
}

func (p *ExecuteSqlReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *ExecuteSqlReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Statement = v
	}
	return nil
}

func (p *ExecuteSqlReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecuteSqlReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecuteSqlReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *ExecuteSqlReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statement", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:statement: ", p), err)
	}
	if err := oprot.WriteString(string(p.Statement)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.statement (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:statement: ", p), err)
	}
	return err
}

func (p *ExecuteSqlReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteSqlReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Type
//  - Paths
//  - TagsList
//  - DataTypeList
//  - QueryDataSet
//  - Timestamps
//  - ValuesList
//  - ReplicaNum
//  - PointsNum
//  - AggregateType
//  - ParseErrorMsg
//  - Limit
//  - Offset
//  - OrderByPath
//  - Ascending
//  - IginxInfos
//  - StorageEngineInfos
//  - MetaStorageInfos
//  - LocalMetaStorageInfo
//  - RegisterTaskInfos
//  - JobId
//  - JobState
type ExecuteSqlResp struct {
	Status               *Status               `thrift:"status,1,required" db:"status" json:"status"`
	Type                 SqlType               `thrift:"type,2,required" db:"type" json:"type"`
	Paths                []string              `thrift:"paths,3" db:"paths" json:"paths,omitempty"`
	TagsList             []map[string]string   `thrift:"tagsList,4" db:"tagsList" json:"tagsList,omitempty"`
	DataTypeList         []DataType            `thrift:"dataTypeList,5" db:"dataTypeList" json:"dataTypeList,omitempty"`
	QueryDataSet         *QueryDataSet         `thrift:"queryDataSet,6" db:"queryDataSet" json:"queryDataSet,omitempty"`
	Timestamps           []byte                `thrift:"timestamps,7" db:"timestamps" json:"timestamps,omitempty"`
	ValuesList           []byte                `thrift:"valuesList,8" db:"valuesList" json:"valuesList,omitempty"`
	ReplicaNum           *int32                `thrift:"replicaNum,9" db:"replicaNum" json:"replicaNum,omitempty"`
	PointsNum            *int64                `thrift:"pointsNum,10" db:"pointsNum" json:"pointsNum,omitempty"`
	AggregateType        *AggregateType        `thrift:"aggregateType,11" db:"aggregateType" json:"aggregateType,omitempty"`
	ParseErrorMsg        *string               `thrift:"parseErrorMsg,12" db:"parseErrorMsg" json:"parseErrorMsg,omitempty"`
	Limit                *int32                `thrift:"limit,13" db:"limit" json:"limit,omitempty"`
	Offset               *int32                `thrift:"offset,14" db:"offset" json:"offset,omitempty"`
	OrderByPath          *string               `thrift:"orderByPath,15" db:"orderByPath" json:"orderByPath,omitempty"`
	Ascending            *bool                 `thrift:"ascending,16" db:"ascending" json:"ascending,omitempty"`
	IginxInfos           []*IginxInfo          `thrift:"iginxInfos,17" db:"iginxInfos" json:"iginxInfos,omitempty"`
	StorageEngineInfos   []*StorageEngineInfo  `thrift:"storageEngineInfos,18" db:"storageEngineInfos" json:"storageEngineInfos,omitempty"`
	MetaStorageInfos     []*MetaStorageInfo    `thrift:"metaStorageInfos,19" db:"metaStorageInfos" json:"metaStorageInfos,omitempty"`
	LocalMetaStorageInfo *LocalMetaStorageInfo `thrift:"localMetaStorageInfo,20" db:"localMetaStorageInfo" json:"localMetaStorageInfo,omitempty"`
	RegisterTaskInfos    []*RegisterTaskInfo   `thrift:"registerTaskInfos,21" db:"registerTaskInfos" json:"registerTaskInfos,omitempty"`
	JobId                *int64                `thrift:"jobId,22" db:"jobId" json:"jobId,omitempty"`
	JobState             *JobState             `thrift:"jobState,23" db:"jobState" json:"jobState,omitempty"`
}

func NewExecuteSqlResp() *ExecuteSqlResp {
	return &ExecuteSqlResp{}
}

var ExecuteSqlResp_Status_DEFAULT *Status

func (p *ExecuteSqlResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return ExecuteSqlResp_Status_DEFAULT
	}
	return p.Status
}

func (p *ExecuteSqlResp) GetType() SqlType {
	return p.Type
}

var ExecuteSqlResp_Paths_DEFAULT []string

func (p *ExecuteSqlResp) GetPaths() []string {
	return p.Paths
}

var ExecuteSqlResp_TagsList_DEFAULT []map[string]string

func (p *ExecuteSqlResp) GetTagsList() []map[string]string {
	return p.TagsList
}

var ExecuteSqlResp_DataTypeList_DEFAULT []DataType

func (p *ExecuteSqlResp) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var ExecuteSqlResp_QueryDataSet_DEFAULT *QueryDataSet

func (p *ExecuteSqlResp) GetQueryDataSet() *QueryDataSet {
	if !p.IsSetQueryDataSet() {
		return ExecuteSqlResp_QueryDataSet_DEFAULT
	}
	return p.QueryDataSet
}

var ExecuteSqlResp_Timestamps_DEFAULT []byte

func (p *ExecuteSqlResp) GetTimestamps() []byte {
	return p.Timestamps
}

var ExecuteSqlResp_ValuesList_DEFAULT []byte

func (p *ExecuteSqlResp) GetValuesList() []byte {
	return p.ValuesList
}

var ExecuteSqlResp_ReplicaNum_DEFAULT int32

func (p *ExecuteSqlResp) GetReplicaNum() int32 {
	if !p.IsSetReplicaNum() {
		return ExecuteSqlResp_ReplicaNum_DEFAULT
	}
	return *p.ReplicaNum
}

var ExecuteSqlResp_PointsNum_DEFAULT int64

func (p *ExecuteSqlResp) GetPointsNum() int64 {
	if !p.IsSetPointsNum() {
		return ExecuteSqlResp_PointsNum_DEFAULT
	}
	return *p.PointsNum
}

var ExecuteSqlResp_AggregateType_DEFAULT AggregateType

func (p *ExecuteSqlResp) GetAggregateType() AggregateType {
	if !p.IsSetAggregateType() {
		return ExecuteSqlResp_AggregateType_DEFAULT
	}
	return *p.AggregateType
}

var ExecuteSqlResp_ParseErrorMsg_DEFAULT string

func (p *ExecuteSqlResp) GetParseErrorMsg() string {
	if !p.IsSetParseErrorMsg() {
		return ExecuteSqlResp_ParseErrorMsg_DEFAULT
	}
	return *p.ParseErrorMsg
}

var ExecuteSqlResp_Limit_DEFAULT int32

func (p *ExecuteSqlResp) GetLimit() int32 {
	if !p.IsSetLimit() {
		return ExecuteSqlResp_Limit_DEFAULT
	}
	return *p.Limit
}

var ExecuteSqlResp_Offset_DEFAULT int32

func (p *ExecuteSqlResp) GetOffset() int32 {
	if !p.IsSetOffset() {
		return ExecuteSqlResp_Offset_DEFAULT
	}
	return *p.Offset
}

var ExecuteSqlResp_OrderByPath_DEFAULT string

func (p *ExecuteSqlResp) GetOrderByPath() string {
	if !p.IsSetOrderByPath() {
		return ExecuteSqlResp_OrderByPath_DEFAULT
	}
	return *p.OrderByPath
}

var ExecuteSqlResp_Ascending_DEFAULT bool

func (p *ExecuteSqlResp) GetAscending() bool {
	if !p.IsSetAscending() {
		return ExecuteSqlResp_Ascending_DEFAULT
	}
	return *p.Ascending
}

var ExecuteSqlResp_IginxInfos_DEFAULT []*IginxInfo

func (p *ExecuteSqlResp) GetIginxInfos() []*IginxInfo {
	return p.IginxInfos
}

var ExecuteSqlResp_StorageEngineInfos_DEFAULT []*StorageEngineInfo

func (p *ExecuteSqlResp) GetStorageEngineInfos() []*StorageEngineInfo {
	return p.StorageEngineInfos
}

var ExecuteSqlResp_MetaStorageInfos_DEFAULT []*MetaStorageInfo

func (p *ExecuteSqlResp) GetMetaStorageInfos() []*MetaStorageInfo {
	return p.MetaStorageInfos
}

var ExecuteSqlResp_LocalMetaStorageInfo_DEFAULT *LocalMetaStorageInfo

func (p *ExecuteSqlResp) GetLocalMetaStorageInfo() *LocalMetaStorageInfo {
	if !p.IsSetLocalMetaStorageInfo() {
		return ExecuteSqlResp_LocalMetaStorageInfo_DEFAULT
	}
	return p.LocalMetaStorageInfo
}

var ExecuteSqlResp_RegisterTaskInfos_DEFAULT []*RegisterTaskInfo

func (p *ExecuteSqlResp) GetRegisterTaskInfos() []*RegisterTaskInfo {
	return p.RegisterTaskInfos
}

var ExecuteSqlResp_JobId_DEFAULT int64

func (p *ExecuteSqlResp) GetJobId() int64 {
	if !p.IsSetJobId() {
		return ExecuteSqlResp_JobId_DEFAULT
	}
	return *p.JobId
}

var ExecuteSqlResp_JobState_DEFAULT JobState

func (p *ExecuteSqlResp) GetJobState() JobState {
	if !p.IsSetJobState() {
		return ExecuteSqlResp_JobState_DEFAULT
	}
	return *p.JobState
}
func (p *ExecuteSqlResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ExecuteSqlResp) IsSetPaths() bool {
	return p.Paths != nil
}

func (p *ExecuteSqlResp) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *ExecuteSqlResp) IsSetDataTypeList() bool {
	return p.DataTypeList != nil
}

func (p *ExecuteSqlResp) IsSetQueryDataSet() bool {
	return p.QueryDataSet != nil
}

func (p *ExecuteSqlResp) IsSetTimestamps() bool {
	return p.Timestamps != nil
}

func (p *ExecuteSqlResp) IsSetValuesList() bool {
	return p.ValuesList != nil
}

func (p *ExecuteSqlResp) IsSetReplicaNum() bool {
	return p.ReplicaNum != nil
}

func (p *ExecuteSqlResp) IsSetPointsNum() bool {
	return p.PointsNum != nil
}

func (p *ExecuteSqlResp) IsSetAggregateType() bool {
	return p.AggregateType != nil
}

func (p *ExecuteSqlResp) IsSetParseErrorMsg() bool {
	return p.ParseErrorMsg != nil
}

func (p *ExecuteSqlResp) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *ExecuteSqlResp) IsSetOffset() bool {
	return p.Offset != nil
}

func (p *ExecuteSqlResp) IsSetOrderByPath() bool {
	return p.OrderByPath != nil
}

func (p *ExecuteSqlResp) IsSetAscending() bool {
	return p.Ascending != nil
}

func (p *ExecuteSqlResp) IsSetIginxInfos() bool {
	return p.IginxInfos != nil
}

func (p *ExecuteSqlResp) IsSetStorageEngineInfos() bool {
	return p.StorageEngineInfos != nil
}

func (p *ExecuteSqlResp) IsSetMetaStorageInfos() bool {
	return p.MetaStorageInfos != nil
}

func (p *ExecuteSqlResp) IsSetLocalMetaStorageInfo() bool {
	return p.LocalMetaStorageInfo != nil
}

func (p *ExecuteSqlResp) IsSetRegisterTaskInfos() bool {
	return p.RegisterTaskInfos != nil
}

func (p *ExecuteSqlResp) IsSetJobId() bool {
	return p.JobId != nil
}

func (p *ExecuteSqlResp) IsSetJobState() bool {
	return p.JobState != nil
}

func (p *ExecuteSqlResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField19(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SqlType(v)
		p.Type = temp
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Paths = tSlice
	for i := 0; i < size; i++ {
		var _elem77 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem77 = v
		}
		p.Paths = append(p.Paths, _elem77)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem78 := tMap
		for i := 0; i < size; i++ {
			var _key79 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key79 = v
			}
			var _val80 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val80 = v
			}
			_elem78[_key79] = _val80
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem78)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem81 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem81 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem81)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField6(iprot thrift.TProtocol) error {
	p.QueryDataSet = &QueryDataSet{}
	if err := p.QueryDataSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryDataSet), err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ValuesList = v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ReplicaNum = &v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.PointsNum = &v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := AggregateType(v)
		p.AggregateType = &temp
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ParseErrorMsg = &v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Offset = &v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.OrderByPath = &v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Ascending = &v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IginxInfo, 0, size)
	p.IginxInfos = tSlice
	for i := 0; i < size; i++ {
		_elem82 := &IginxInfo{}
		if err := _elem82.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem82), err)
		}
		p.IginxInfos = append(p.IginxInfos, _elem82)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*StorageEngineInfo, 0, size)
	p.StorageEngineInfos = tSlice
	for i := 0; i < size; i++ {
		_elem83 := &StorageEngineInfo{}
		if err := _elem83.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem83), err)
		}
		p.StorageEngineInfos = append(p.StorageEngineInfos, _elem83)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MetaStorageInfo, 0, size)
	p.MetaStorageInfos = tSlice
	for i := 0; i < size; i++ {
		_elem84 := &MetaStorageInfo{}
		if err := _elem84.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem84), err)
		}
		p.MetaStorageInfos = append(p.MetaStorageInfos, _elem84)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField20(iprot thrift.TProtocol) error {
	p.LocalMetaStorageInfo = &LocalMetaStorageInfo{}
	if err := p.LocalMetaStorageInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalMetaStorageInfo), err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField21(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RegisterTaskInfo, 0, size)
	p.RegisterTaskInfos = tSlice
	for i := 0; i < size; i++ {
		_elem85 := &RegisterTaskInfo{}
		if err := _elem85.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem85), err)
		}
		p.RegisterTaskInfos = append(p.RegisterTaskInfos, _elem85)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.JobId = &v
	}
	return nil
}

func (p *ExecuteSqlResp) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		temp := JobState(v)
		p.JobState = &temp
	}
	return nil
}

func (p *ExecuteSqlResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecuteSqlResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecuteSqlResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *ExecuteSqlResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *ExecuteSqlResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPaths() {
		if err := oprot.WriteFieldBegin("paths", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paths: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Paths)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Paths {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paths: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tagsList: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataTypeList() {
		if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dataTypeList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.DataTypeList {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dataTypeList: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryDataSet() {
		if err := oprot.WriteFieldBegin("queryDataSet", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:queryDataSet: ", p), err)
		}
		if err := p.QueryDataSet.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryDataSet), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:queryDataSet: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamps() {
		if err := oprot.WriteFieldBegin("timestamps", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:timestamps: ", p), err)
		}
		if err := oprot.WriteBinary(p.Timestamps); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamps (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:timestamps: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetValuesList() {
		if err := oprot.WriteFieldBegin("valuesList", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:valuesList: ", p), err)
		}
		if err := oprot.WriteBinary(p.ValuesList); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.valuesList (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:valuesList: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplicaNum() {
		if err := oprot.WriteFieldBegin("replicaNum", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:replicaNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ReplicaNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replicaNum (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:replicaNum: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPointsNum() {
		if err := oprot.WriteFieldBegin("pointsNum", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pointsNum: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PointsNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pointsNum (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pointsNum: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggregateType() {
		if err := oprot.WriteFieldBegin("aggregateType", thrift.I32, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:aggregateType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.AggregateType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.aggregateType (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:aggregateType: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetParseErrorMsg() {
		if err := oprot.WriteFieldBegin("parseErrorMsg", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:parseErrorMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ParseErrorMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.parseErrorMsg (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:parseErrorMsg: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin("limit", thrift.I32, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:limit: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:limit: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetOffset() {
		if err := oprot.WriteFieldBegin("offset", thrift.I32, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:offset: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Offset)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.offset (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:offset: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderByPath() {
		if err := oprot.WriteFieldBegin("orderByPath", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:orderByPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrderByPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orderByPath (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:orderByPath: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetAscending() {
		if err := oprot.WriteFieldBegin("ascending", thrift.BOOL, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:ascending: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Ascending)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ascending (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:ascending: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetIginxInfos() {
		if err := oprot.WriteFieldBegin("iginxInfos", thrift.LIST, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:iginxInfos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.IginxInfos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.IginxInfos {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:iginxInfos: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageEngineInfos() {
		if err := oprot.WriteFieldBegin("storageEngineInfos", thrift.LIST, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:storageEngineInfos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StorageEngineInfos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.StorageEngineInfos {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:storageEngineInfos: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaStorageInfos() {
		if err := oprot.WriteFieldBegin("metaStorageInfos", thrift.LIST, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:metaStorageInfos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MetaStorageInfos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MetaStorageInfos {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:metaStorageInfos: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalMetaStorageInfo() {
		if err := oprot.WriteFieldBegin("localMetaStorageInfo", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:localMetaStorageInfo: ", p), err)
		}
		if err := p.LocalMetaStorageInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalMetaStorageInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:localMetaStorageInfo: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegisterTaskInfos() {
		if err := oprot.WriteFieldBegin("registerTaskInfos", thrift.LIST, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:registerTaskInfos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RegisterTaskInfos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RegisterTaskInfos {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:registerTaskInfos: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobId() {
		if err := oprot.WriteFieldBegin("jobId", thrift.I64, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:jobId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.JobId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jobId (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:jobId: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobState() {
		if err := oprot.WriteFieldBegin("jobState", thrift.I32, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:jobState: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.JobState)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jobState (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:jobState: ", p), err)
		}
	}
	return err
}

func (p *ExecuteSqlResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteSqlResp(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Username
//  - Password
//  - Auths
type UpdateUserReq struct {
	SessionId int64      `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Username  string     `thrift:"username,2,required" db:"username" json:"username"`
	Password  *string    `thrift:"password,3" db:"password" json:"password,omitempty"`
	Auths     []AuthType `thrift:"auths,4" db:"auths" json:"auths,omitempty"`
}

func NewUpdateUserReq() *UpdateUserReq {
	return &UpdateUserReq{}
}

func (p *UpdateUserReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *UpdateUserReq) GetUsername() string {
	return p.Username
}

var UpdateUserReq_Password_DEFAULT string

func (p *UpdateUserReq) GetPassword() string {
	if !p.IsSetPassword() {
		return UpdateUserReq_Password_DEFAULT
	}
	return *p.Password
}

var UpdateUserReq_Auths_DEFAULT []AuthType

func (p *UpdateUserReq) GetAuths() []AuthType {
	return p.Auths
}
func (p *UpdateUserReq) IsSetPassword() bool {
	return p.Password != nil
}

func (p *UpdateUserReq) IsSetAuths() bool {
	return p.Auths != nil
}

func (p *UpdateUserReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetUsername bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetUsername = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetUsername {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Username is not set"))
	}
	return nil
}

func (p *UpdateUserReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *UpdateUserReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *UpdateUserReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = &v
	}
	return nil
}

func (p *UpdateUserReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]AuthType, 0, size)
	p.Auths = tSet
	for i := 0; i < size; i++ {
		var _elem86 AuthType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := AuthType(v)
			_elem86 = temp
		}
		p.Auths = append(p.Auths, _elem86)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *UpdateUserReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateUserReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *UpdateUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err)
	}
	return err
}

func (p *UpdateUserReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Password)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
		}
	}
	return err
}

func (p *UpdateUserReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuths() {
		if err := oprot.WriteFieldBegin("auths", thrift.SET, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:auths: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.Auths)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for i := 0; i < len(p.Auths); i++ {
			for j := i + 1; j < len(p.Auths); j++ {
				if reflect.DeepEqual(p.Auths[i], p.Auths[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Auths[i]))
				}
			}
		}
		for _, v := range p.Auths {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:auths: ", p), err)
		}
	}
	return err
}

func (p *UpdateUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateUserReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Username
//  - Password
//  - Auths
type AddUserReq struct {
	SessionId int64      `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Username  string     `thrift:"username,2,required" db:"username" json:"username"`
	Password  string     `thrift:"password,3,required" db:"password" json:"password"`
	Auths     []AuthType `thrift:"auths,4,required" db:"auths" json:"auths"`
}

func NewAddUserReq() *AddUserReq {
	return &AddUserReq{}
}

func (p *AddUserReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *AddUserReq) GetUsername() string {
	return p.Username
}

func (p *AddUserReq) GetPassword() string {
	return p.Password
}

func (p *AddUserReq) GetAuths() []AuthType {
	return p.Auths
}
func (p *AddUserReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetUsername bool = false
	var issetPassword bool = false
	var issetAuths bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetUsername = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetPassword = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetAuths = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetUsername {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Username is not set"))
	}
	if !issetPassword {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Password is not set"))
	}
	if !issetAuths {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Auths is not set"))
	}
	return nil
}

func (p *AddUserReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *AddUserReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *AddUserReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *AddUserReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]AuthType, 0, size)
	p.Auths = tSet
	for i := 0; i < size; i++ {
		var _elem87 AuthType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := AuthType(v)
			_elem87 = temp
		}
		p.Auths = append(p.Auths, _elem87)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AddUserReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddUserReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *AddUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err)
	}
	return err
}

func (p *AddUserReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *AddUserReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auths", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:auths: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.Auths)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.Auths); i++ {
		for j := i + 1; j < len(p.Auths); j++ {
			if reflect.DeepEqual(p.Auths[i], p.Auths[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Auths[i]))
			}
		}
	}
	for _, v := range p.Auths {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:auths: ", p), err)
	}
	return err
}

func (p *AddUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddUserReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Username
type DeleteUserReq struct {
	SessionId int64  `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Username  string `thrift:"username,2,required" db:"username" json:"username"`
}

func NewDeleteUserReq() *DeleteUserReq {
	return &DeleteUserReq{}
}

func (p *DeleteUserReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *DeleteUserReq) GetUsername() string {
	return p.Username
}
func (p *DeleteUserReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetUsername bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetUsername = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetUsername {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Username is not set"))
	}
	return nil
}

func (p *DeleteUserReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *DeleteUserReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *DeleteUserReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeleteUserReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *DeleteUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err)
	}
	return err
}

func (p *DeleteUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteUserReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Usernames
type GetUserReq struct {
	SessionId int64    `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Usernames []string `thrift:"usernames,2" db:"usernames" json:"usernames,omitempty"`
}

func NewGetUserReq() *GetUserReq {
	return &GetUserReq{}
}

func (p *GetUserReq) GetSessionId() int64 {
	return p.SessionId
}

var GetUserReq_Usernames_DEFAULT []string

func (p *GetUserReq) GetUsernames() []string {
	return p.Usernames
}
func (p *GetUserReq) IsSetUsernames() bool {
	return p.Usernames != nil
}

func (p *GetUserReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	return nil
}

func (p *GetUserReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *GetUserReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Usernames = tSlice
	for i := 0; i < size; i++ {
		var _elem88 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem88 = v
		}
		p.Usernames = append(p.Usernames, _elem88)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetUserReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUserReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetUserReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *GetUserReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsernames() {
		if err := oprot.WriteFieldBegin("usernames", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:usernames: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Usernames)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Usernames {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:usernames: ", p), err)
		}
	}
	return err
}

func (p *GetUserReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Usernames
//  - UserTypes
//  - Auths
type GetUserResp struct {
	Status    *Status      `thrift:"status,1,required" db:"status" json:"status"`
	Usernames []string     `thrift:"usernames,2" db:"usernames" json:"usernames,omitempty"`
	UserTypes []UserType   `thrift:"userTypes,3" db:"userTypes" json:"userTypes,omitempty"`
	Auths     [][]AuthType `thrift:"auths,4" db:"auths" json:"auths,omitempty"`
}

func NewGetUserResp() *GetUserResp {
	return &GetUserResp{}
}

var GetUserResp_Status_DEFAULT *Status

func (p *GetUserResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return GetUserResp_Status_DEFAULT
	}
	return p.Status
}

var GetUserResp_Usernames_DEFAULT []string

func (p *GetUserResp) GetUsernames() []string {
	return p.Usernames
}

var GetUserResp_UserTypes_DEFAULT []UserType

func (p *GetUserResp) GetUserTypes() []UserType {
	return p.UserTypes
}

var GetUserResp_Auths_DEFAULT [][]AuthType

func (p *GetUserResp) GetAuths() [][]AuthType {
	return p.Auths
}
func (p *GetUserResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetUserResp) IsSetUsernames() bool {
	return p.Usernames != nil
}

func (p *GetUserResp) IsSetUserTypes() bool {
	return p.UserTypes != nil
}

func (p *GetUserResp) IsSetAuths() bool {
	return p.Auths != nil
}

func (p *GetUserResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *GetUserResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *GetUserResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Usernames = tSlice
	for i := 0; i < size; i++ {
		var _elem89 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem89 = v
		}
		p.Usernames = append(p.Usernames, _elem89)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetUserResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]UserType, 0, size)
	p.UserTypes = tSlice
	for i := 0; i < size; i++ {
		var _elem90 UserType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := UserType(v)
			_elem90 = temp
		}
		p.UserTypes = append(p.UserTypes, _elem90)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetUserResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]AuthType, 0, size)
	p.Auths = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make([]AuthType, 0, size)
		_elem91 := tSet
		for i := 0; i < size; i++ {
			var _elem92 AuthType
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := AuthType(v)
				_elem92 = temp
			}
			_elem91 = append(_elem91, _elem92)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.Auths = append(p.Auths, _elem91)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetUserResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetUserResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetUserResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *GetUserResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsernames() {
		if err := oprot.WriteFieldBegin("usernames", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:usernames: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Usernames)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Usernames {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:usernames: ", p), err)
		}
	}
	return err
}

func (p *GetUserResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserTypes() {
		if err := oprot.WriteFieldBegin("userTypes", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userTypes: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.UserTypes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.UserTypes {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userTypes: ", p), err)
		}
	}
	return err
}

func (p *GetUserResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuths() {
		if err := oprot.WriteFieldBegin("auths", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:auths: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.SET, len(p.Auths)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Auths {
			if err := oprot.WriteSetBegin(thrift.I32, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for i := 0; i < len(v); i++ {
				for j := i + 1; j < len(v); j++ {
					if reflect.DeepEqual(v[i], v[j]) {
						return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
					}
				}
			}
			for _, v := range v {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:auths: ", p), err)
		}
	}
	return err
}

func (p *GetUserResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserResp(%+v)", *p)
}

// Attributes:
//  - SessionId
type GetClusterInfoReq struct {
	SessionId int64 `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
}

func NewGetClusterInfoReq() *GetClusterInfoReq {
	return &GetClusterInfoReq{}
}

func (p *GetClusterInfoReq) GetSessionId() int64 {
	return p.SessionId
}
func (p *GetClusterInfoReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	return nil
}

func (p *GetClusterInfoReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *GetClusterInfoReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetClusterInfoReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetClusterInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *GetClusterInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterInfoReq(%+v)", *p)
}

// Attributes:
//  - ID
//  - IP
//  - Port
type IginxInfo struct {
	ID   int64  `thrift:"id,1,required" db:"id" json:"id"`
	IP   string `thrift:"ip,2,required" db:"ip" json:"ip"`
	Port int32  `thrift:"port,3,required" db:"port" json:"port"`
}

func NewIginxInfo() *IginxInfo {
	return &IginxInfo{}
}

func (p *IginxInfo) GetID() int64 {
	return p.ID
}

func (p *IginxInfo) GetIP() string {
	return p.IP
}

func (p *IginxInfo) GetPort() int32 {
	return p.Port
}
func (p *IginxInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetIP bool = false
	var issetPort bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetIP = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetPort = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	return nil
}

func (p *IginxInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *IginxInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *IginxInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *IginxInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IginxInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IginxInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *IginxInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *IginxInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err)
	}
	return err
}

func (p *IginxInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IginxInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - IP
//  - Port
//  - Type
type StorageEngineInfo struct {
	ID   int64  `thrift:"id,1,required" db:"id" json:"id"`
	IP   string `thrift:"ip,2,required" db:"ip" json:"ip"`
	Port int32  `thrift:"port,3,required" db:"port" json:"port"`
	Type string `thrift:"type,4,required" db:"type" json:"type"`
}

func NewStorageEngineInfo() *StorageEngineInfo {
	return &StorageEngineInfo{}
}

func (p *StorageEngineInfo) GetID() int64 {
	return p.ID
}

func (p *StorageEngineInfo) GetIP() string {
	return p.IP
}

func (p *StorageEngineInfo) GetPort() int32 {
	return p.Port
}

func (p *StorageEngineInfo) GetType() string {
	return p.Type
}
func (p *StorageEngineInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetIP bool = false
	var issetPort bool = false
	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetIP = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetPort = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *StorageEngineInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *StorageEngineInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *StorageEngineInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *StorageEngineInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *StorageEngineInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StorageEngineInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *StorageEngineInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *StorageEngineInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *StorageEngineInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err)
	}
	return err
}

func (p *StorageEngineInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err)
	}
	return err
}

func (p *StorageEngineInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageEngineInfo(%+v)", *p)
}

// Attributes:
//  - IP
//  - Port
//  - Type
type MetaStorageInfo struct {
	IP   string `thrift:"ip,1,required" db:"ip" json:"ip"`
	Port int32  `thrift:"port,2,required" db:"port" json:"port"`
	Type string `thrift:"type,3,required" db:"type" json:"type"`
}

func NewMetaStorageInfo() *MetaStorageInfo {
	return &MetaStorageInfo{}
}

func (p *MetaStorageInfo) GetIP() string {
	return p.IP
}

func (p *MetaStorageInfo) GetPort() int32 {
	return p.Port
}

func (p *MetaStorageInfo) GetType() string {
	return p.Type
}
func (p *MetaStorageInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetIP bool = false
	var issetPort bool = false
	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetIP = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetPort = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"))
	}
	if !issetPort {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *MetaStorageInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *MetaStorageInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *MetaStorageInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *MetaStorageInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MetaStorageInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MetaStorageInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *MetaStorageInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err)
	}
	return err
}

func (p *MetaStorageInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteString(string(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *MetaStorageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetaStorageInfo(%+v)", *p)
}

// Attributes:
//  - Path
type LocalMetaStorageInfo struct {
	Path string `thrift:"path,1,required" db:"path" json:"path"`
}

func NewLocalMetaStorageInfo() *LocalMetaStorageInfo {
	return &LocalMetaStorageInfo{}
}

func (p *LocalMetaStorageInfo) GetPath() string {
	return p.Path
}
func (p *LocalMetaStorageInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPath bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetPath = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPath {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Path is not set"))
	}
	return nil
}

func (p *LocalMetaStorageInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *LocalMetaStorageInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LocalMetaStorageInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LocalMetaStorageInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *LocalMetaStorageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocalMetaStorageInfo(%+v)", *p)
}

// Attributes:
//  - Status
//  - IginxInfos
//  - StorageEngineInfos
//  - MetaStorageInfos
//  - LocalMetaStorageInfo
type GetClusterInfoResp struct {
	Status               *Status               `thrift:"status,1,required" db:"status" json:"status"`
	IginxInfos           []*IginxInfo          `thrift:"iginxInfos,2" db:"iginxInfos" json:"iginxInfos,omitempty"`
	StorageEngineInfos   []*StorageEngineInfo  `thrift:"storageEngineInfos,3" db:"storageEngineInfos" json:"storageEngineInfos,omitempty"`
	MetaStorageInfos     []*MetaStorageInfo    `thrift:"metaStorageInfos,4" db:"metaStorageInfos" json:"metaStorageInfos,omitempty"`
	LocalMetaStorageInfo *LocalMetaStorageInfo `thrift:"localMetaStorageInfo,5" db:"localMetaStorageInfo" json:"localMetaStorageInfo,omitempty"`
}

func NewGetClusterInfoResp() *GetClusterInfoResp {
	return &GetClusterInfoResp{}
}

var GetClusterInfoResp_Status_DEFAULT *Status

func (p *GetClusterInfoResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return GetClusterInfoResp_Status_DEFAULT
	}
	return p.Status
}

var GetClusterInfoResp_IginxInfos_DEFAULT []*IginxInfo

func (p *GetClusterInfoResp) GetIginxInfos() []*IginxInfo {
	return p.IginxInfos
}

var GetClusterInfoResp_StorageEngineInfos_DEFAULT []*StorageEngineInfo

func (p *GetClusterInfoResp) GetStorageEngineInfos() []*StorageEngineInfo {
	return p.StorageEngineInfos
}

var GetClusterInfoResp_MetaStorageInfos_DEFAULT []*MetaStorageInfo

func (p *GetClusterInfoResp) GetMetaStorageInfos() []*MetaStorageInfo {
	return p.MetaStorageInfos
}

var GetClusterInfoResp_LocalMetaStorageInfo_DEFAULT *LocalMetaStorageInfo

func (p *GetClusterInfoResp) GetLocalMetaStorageInfo() *LocalMetaStorageInfo {
	if !p.IsSetLocalMetaStorageInfo() {
		return GetClusterInfoResp_LocalMetaStorageInfo_DEFAULT
	}
	return p.LocalMetaStorageInfo
}
func (p *GetClusterInfoResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetClusterInfoResp) IsSetIginxInfos() bool {
	return p.IginxInfos != nil
}

func (p *GetClusterInfoResp) IsSetStorageEngineInfos() bool {
	return p.StorageEngineInfos != nil
}

func (p *GetClusterInfoResp) IsSetMetaStorageInfos() bool {
	return p.MetaStorageInfos != nil
}

func (p *GetClusterInfoResp) IsSetLocalMetaStorageInfo() bool {
	return p.LocalMetaStorageInfo != nil
}

func (p *GetClusterInfoResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *GetClusterInfoResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *GetClusterInfoResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IginxInfo, 0, size)
	p.IginxInfos = tSlice
	for i := 0; i < size; i++ {
		_elem93 := &IginxInfo{}
		if err := _elem93.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem93), err)
		}
		p.IginxInfos = append(p.IginxInfos, _elem93)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetClusterInfoResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*StorageEngineInfo, 0, size)
	p.StorageEngineInfos = tSlice
	for i := 0; i < size; i++ {
		_elem94 := &StorageEngineInfo{}
		if err := _elem94.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem94), err)
		}
		p.StorageEngineInfos = append(p.StorageEngineInfos, _elem94)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetClusterInfoResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MetaStorageInfo, 0, size)
	p.MetaStorageInfos = tSlice
	for i := 0; i < size; i++ {
		_elem95 := &MetaStorageInfo{}
		if err := _elem95.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem95), err)
		}
		p.MetaStorageInfos = append(p.MetaStorageInfos, _elem95)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetClusterInfoResp) ReadField5(iprot thrift.TProtocol) error {
	p.LocalMetaStorageInfo = &LocalMetaStorageInfo{}
	if err := p.LocalMetaStorageInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalMetaStorageInfo), err)
	}
	return nil
}

func (p *GetClusterInfoResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetClusterInfoResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetClusterInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *GetClusterInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIginxInfos() {
		if err := oprot.WriteFieldBegin("iginxInfos", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:iginxInfos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.IginxInfos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.IginxInfos {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:iginxInfos: ", p), err)
		}
	}
	return err
}

func (p *GetClusterInfoResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageEngineInfos() {
		if err := oprot.WriteFieldBegin("storageEngineInfos", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storageEngineInfos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StorageEngineInfos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.StorageEngineInfos {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storageEngineInfos: ", p), err)
		}
	}
	return err
}

func (p *GetClusterInfoResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaStorageInfos() {
		if err := oprot.WriteFieldBegin("metaStorageInfos", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metaStorageInfos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MetaStorageInfos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MetaStorageInfos {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metaStorageInfos: ", p), err)
		}
	}
	return err
}

func (p *GetClusterInfoResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalMetaStorageInfo() {
		if err := oprot.WriteFieldBegin("localMetaStorageInfo", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:localMetaStorageInfo: ", p), err)
		}
		if err := p.LocalMetaStorageInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalMetaStorageInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:localMetaStorageInfo: ", p), err)
		}
	}
	return err
}

func (p *GetClusterInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterInfoResp(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Statement
//  - FetchSize
//  - Timeout
type ExecuteStatementReq struct {
	SessionId int64  `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Statement string `thrift:"statement,2,required" db:"statement" json:"statement"`
	FetchSize *int32 `thrift:"fetchSize,3" db:"fetchSize" json:"fetchSize,omitempty"`
	Timeout   *int64 `thrift:"timeout,4" db:"timeout" json:"timeout,omitempty"`
}

func NewExecuteStatementReq() *ExecuteStatementReq {
	return &ExecuteStatementReq{}
}

func (p *ExecuteStatementReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *ExecuteStatementReq) GetStatement() string {
	return p.Statement
}

var ExecuteStatementReq_FetchSize_DEFAULT int32

func (p *ExecuteStatementReq) GetFetchSize() int32 {
	if !p.IsSetFetchSize() {
		return ExecuteStatementReq_FetchSize_DEFAULT
	}
	return *p.FetchSize
}

var ExecuteStatementReq_Timeout_DEFAULT int64

func (p *ExecuteStatementReq) GetTimeout() int64 {
	if !p.IsSetTimeout() {
		return ExecuteStatementReq_Timeout_DEFAULT
	}
	return *p.Timeout
}
func (p *ExecuteStatementReq) IsSetFetchSize() bool {
	return p.FetchSize != nil
}

func (p *ExecuteStatementReq) IsSetTimeout() bool {
	return p.Timeout != nil
}

func (p *ExecuteStatementReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetStatement bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetStatement = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetStatement {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Statement is not set"))
	}
	return nil
}

func (p *ExecuteStatementReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *ExecuteStatementReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Statement = v
	}
	return nil
}

func (p *ExecuteStatementReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FetchSize = &v
	}
	return nil
}

func (p *ExecuteStatementReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timeout = &v
	}
	return nil
}

func (p *ExecuteStatementReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecuteStatementReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecuteStatementReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *ExecuteStatementReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("statement", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:statement: ", p), err)
	}
	if err := oprot.WriteString(string(p.Statement)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.statement (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:statement: ", p), err)
	}
	return err
}

func (p *ExecuteStatementReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFetchSize() {
		if err := oprot.WriteFieldBegin("fetchSize", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fetchSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.FetchSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fetchSize (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fetchSize: ", p), err)
		}
	}
	return err
}

func (p *ExecuteStatementReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeout() {
		if err := oprot.WriteFieldBegin("timeout", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeout: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timeout)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeout (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeout: ", p), err)
		}
	}
	return err
}

func (p *ExecuteStatementReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteStatementReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - Type
//  - QueryId
//  - Columns
//  - TagsList
//  - DataTypeList
//  - QueryDataSet
type ExecuteStatementResp struct {
	Status       *Status             `thrift:"status,1,required" db:"status" json:"status"`
	Type         SqlType             `thrift:"type,2,required" db:"type" json:"type"`
	QueryId      *int64              `thrift:"queryId,3" db:"queryId" json:"queryId,omitempty"`
	Columns      []string            `thrift:"columns,4" db:"columns" json:"columns,omitempty"`
	TagsList     []map[string]string `thrift:"tagsList,5" db:"tagsList" json:"tagsList,omitempty"`
	DataTypeList []DataType          `thrift:"dataTypeList,6" db:"dataTypeList" json:"dataTypeList,omitempty"`
	QueryDataSet *QueryDataSetV2     `thrift:"queryDataSet,7" db:"queryDataSet" json:"queryDataSet,omitempty"`
}

func NewExecuteStatementResp() *ExecuteStatementResp {
	return &ExecuteStatementResp{}
}

var ExecuteStatementResp_Status_DEFAULT *Status

func (p *ExecuteStatementResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return ExecuteStatementResp_Status_DEFAULT
	}
	return p.Status
}

func (p *ExecuteStatementResp) GetType() SqlType {
	return p.Type
}

var ExecuteStatementResp_QueryId_DEFAULT int64

func (p *ExecuteStatementResp) GetQueryId() int64 {
	if !p.IsSetQueryId() {
		return ExecuteStatementResp_QueryId_DEFAULT
	}
	return *p.QueryId
}

var ExecuteStatementResp_Columns_DEFAULT []string

func (p *ExecuteStatementResp) GetColumns() []string {
	return p.Columns
}

var ExecuteStatementResp_TagsList_DEFAULT []map[string]string

func (p *ExecuteStatementResp) GetTagsList() []map[string]string {
	return p.TagsList
}

var ExecuteStatementResp_DataTypeList_DEFAULT []DataType

func (p *ExecuteStatementResp) GetDataTypeList() []DataType {
	return p.DataTypeList
}

var ExecuteStatementResp_QueryDataSet_DEFAULT *QueryDataSetV2

func (p *ExecuteStatementResp) GetQueryDataSet() *QueryDataSetV2 {
	if !p.IsSetQueryDataSet() {
		return ExecuteStatementResp_QueryDataSet_DEFAULT
	}
	return p.QueryDataSet
}
func (p *ExecuteStatementResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ExecuteStatementResp) IsSetQueryId() bool {
	return p.QueryId != nil
}

func (p *ExecuteStatementResp) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *ExecuteStatementResp) IsSetTagsList() bool {
	return p.TagsList != nil
}

func (p *ExecuteStatementResp) IsSetDataTypeList() bool {
	return p.DataTypeList != nil
}

func (p *ExecuteStatementResp) IsSetQueryDataSet() bool {
	return p.QueryDataSet != nil
}

func (p *ExecuteStatementResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *ExecuteStatementResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *ExecuteStatementResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SqlType(v)
		p.Type = temp
	}
	return nil
}

func (p *ExecuteStatementResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.QueryId = &v
	}
	return nil
}

func (p *ExecuteStatementResp) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem96 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem96 = v
		}
		p.Columns = append(p.Columns, _elem96)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteStatementResp) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.TagsList = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem97 := tMap
		for i := 0; i < size; i++ {
			var _key98 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key98 = v
			}
			var _val99 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val99 = v
			}
			_elem97[_key98] = _val99
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.TagsList = append(p.TagsList, _elem97)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteStatementResp) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]DataType, 0, size)
	p.DataTypeList = tSlice
	for i := 0; i < size; i++ {
		var _elem100 DataType
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := DataType(v)
			_elem100 = temp
		}
		p.DataTypeList = append(p.DataTypeList, _elem100)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ExecuteStatementResp) ReadField7(iprot thrift.TProtocol) error {
	p.QueryDataSet = &QueryDataSetV2{}
	if err := p.QueryDataSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryDataSet), err)
	}
	return nil
}

func (p *ExecuteStatementResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecuteStatementResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExecuteStatementResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *ExecuteStatementResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *ExecuteStatementResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryId() {
		if err := oprot.WriteFieldBegin("queryId", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:queryId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.QueryId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.queryId (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:queryId: ", p), err)
		}
	}
	return err
}

func (p *ExecuteStatementResp) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:columns: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Columns {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:columns: ", p), err)
		}
	}
	return err
}

func (p *ExecuteStatementResp) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsList() {
		if err := oprot.WriteFieldBegin("tagsList", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tagsList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.TagsList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagsList {
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tagsList: ", p), err)
		}
	}
	return err
}

func (p *ExecuteStatementResp) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataTypeList() {
		if err := oprot.WriteFieldBegin("dataTypeList", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dataTypeList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.DataTypeList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.DataTypeList {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dataTypeList: ", p), err)
		}
	}
	return err
}

func (p *ExecuteStatementResp) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryDataSet() {
		if err := oprot.WriteFieldBegin("queryDataSet", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:queryDataSet: ", p), err)
		}
		if err := p.QueryDataSet.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryDataSet), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:queryDataSet: ", p), err)
		}
	}
	return err
}

func (p *ExecuteStatementResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteStatementResp(%+v)", *p)
}

// Attributes:
//  - ValuesList
//  - BitmapList
type QueryDataSetV2 struct {
	ValuesList [][]byte `thrift:"valuesList,1,required" db:"valuesList" json:"valuesList"`
	BitmapList [][]byte `thrift:"bitmapList,2,required" db:"bitmapList" json:"bitmapList"`
}

func NewQueryDataSetV2() *QueryDataSetV2 {
	return &QueryDataSetV2{}
}

func (p *QueryDataSetV2) GetValuesList() [][]byte {
	return p.ValuesList
}

func (p *QueryDataSetV2) GetBitmapList() [][]byte {
	return p.BitmapList
}
func (p *QueryDataSetV2) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetValuesList bool = false
	var issetBitmapList bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetValuesList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetBitmapList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetValuesList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ValuesList is not set"))
	}
	if !issetBitmapList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BitmapList is not set"))
	}
	return nil
}

func (p *QueryDataSetV2) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.ValuesList = tSlice
	for i := 0; i < size; i++ {
		var _elem101 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem101 = v
		}
		p.ValuesList = append(p.ValuesList, _elem101)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryDataSetV2) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.BitmapList = tSlice
	for i := 0; i < size; i++ {
		var _elem102 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem102 = v
		}
		p.BitmapList = append(p.BitmapList, _elem102)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QueryDataSetV2) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryDataSetV2"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryDataSetV2) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("valuesList", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:valuesList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ValuesList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ValuesList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:valuesList: ", p), err)
	}
	return err
}

func (p *QueryDataSetV2) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bitmapList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bitmapList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BitmapList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BitmapList {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bitmapList: ", p), err)
	}
	return err
}

func (p *QueryDataSetV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryDataSetV2(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - QueryId
type CloseStatementReq struct {
	SessionId int64 `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	QueryId   int64 `thrift:"queryId,2,required" db:"queryId" json:"queryId"`
}

func NewCloseStatementReq() *CloseStatementReq {
	return &CloseStatementReq{}
}

func (p *CloseStatementReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *CloseStatementReq) GetQueryId() int64 {
	return p.QueryId
}
func (p *CloseStatementReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetQueryId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetQueryId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetQueryId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryId is not set"))
	}
	return nil
}

func (p *CloseStatementReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *CloseStatementReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.QueryId = v
	}
	return nil
}

func (p *CloseStatementReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CloseStatementReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloseStatementReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *CloseStatementReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queryId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queryId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.QueryId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.queryId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queryId: ", p), err)
	}
	return err
}

func (p *CloseStatementReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloseStatementReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - QueryId
//  - FetchSize
//  - Timeout
type FetchResultsReq struct {
	SessionId int64  `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	QueryId   int64  `thrift:"queryId,2,required" db:"queryId" json:"queryId"`
	FetchSize *int32 `thrift:"fetchSize,3" db:"fetchSize" json:"fetchSize,omitempty"`
	Timeout   *int64 `thrift:"timeout,4" db:"timeout" json:"timeout,omitempty"`
}

func NewFetchResultsReq() *FetchResultsReq {
	return &FetchResultsReq{}
}

func (p *FetchResultsReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *FetchResultsReq) GetQueryId() int64 {
	return p.QueryId
}

var FetchResultsReq_FetchSize_DEFAULT int32

func (p *FetchResultsReq) GetFetchSize() int32 {
	if !p.IsSetFetchSize() {
		return FetchResultsReq_FetchSize_DEFAULT
	}
	return *p.FetchSize
}

var FetchResultsReq_Timeout_DEFAULT int64

func (p *FetchResultsReq) GetTimeout() int64 {
	if !p.IsSetTimeout() {
		return FetchResultsReq_Timeout_DEFAULT
	}
	return *p.Timeout
}
func (p *FetchResultsReq) IsSetFetchSize() bool {
	return p.FetchSize != nil
}

func (p *FetchResultsReq) IsSetTimeout() bool {
	return p.Timeout != nil
}

func (p *FetchResultsReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetQueryId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetQueryId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetQueryId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryId is not set"))
	}
	return nil
}

func (p *FetchResultsReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *FetchResultsReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.QueryId = v
	}
	return nil
}

func (p *FetchResultsReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FetchSize = &v
	}
	return nil
}

func (p *FetchResultsReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timeout = &v
	}
	return nil
}

func (p *FetchResultsReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchResultsReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FetchResultsReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *FetchResultsReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queryId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queryId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.QueryId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.queryId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queryId: ", p), err)
	}
	return err
}

func (p *FetchResultsReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFetchSize() {
		if err := oprot.WriteFieldBegin("fetchSize", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fetchSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.FetchSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fetchSize (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fetchSize: ", p), err)
		}
	}
	return err
}

func (p *FetchResultsReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeout() {
		if err := oprot.WriteFieldBegin("timeout", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeout: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timeout)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeout (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeout: ", p), err)
		}
	}
	return err
}

func (p *FetchResultsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchResultsReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - HasMoreResults
//  - QueryDataSet
type FetchResultsResp struct {
	Status         *Status         `thrift:"status,1,required" db:"status" json:"status"`
	HasMoreResults bool            `thrift:"hasMoreResults,2,required" db:"hasMoreResults" json:"hasMoreResults"`
	QueryDataSet   *QueryDataSetV2 `thrift:"queryDataSet,3" db:"queryDataSet" json:"queryDataSet,omitempty"`
}

func NewFetchResultsResp() *FetchResultsResp {
	return &FetchResultsResp{}
}

var FetchResultsResp_Status_DEFAULT *Status

func (p *FetchResultsResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return FetchResultsResp_Status_DEFAULT
	}
	return p.Status
}

func (p *FetchResultsResp) GetHasMoreResults() bool {
	return p.HasMoreResults
}

var FetchResultsResp_QueryDataSet_DEFAULT *QueryDataSetV2

func (p *FetchResultsResp) GetQueryDataSet() *QueryDataSetV2 {
	if !p.IsSetQueryDataSet() {
		return FetchResultsResp_QueryDataSet_DEFAULT
	}
	return p.QueryDataSet
}
func (p *FetchResultsResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *FetchResultsResp) IsSetQueryDataSet() bool {
	return p.QueryDataSet != nil
}

func (p *FetchResultsResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetHasMoreResults bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetHasMoreResults = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetHasMoreResults {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HasMoreResults is not set"))
	}
	return nil
}

func (p *FetchResultsResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *FetchResultsResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HasMoreResults = v
	}
	return nil
}

func (p *FetchResultsResp) ReadField3(iprot thrift.TProtocol) error {
	p.QueryDataSet = &QueryDataSetV2{}
	if err := p.QueryDataSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryDataSet), err)
	}
	return nil
}

func (p *FetchResultsResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FetchResultsResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FetchResultsResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *FetchResultsResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasMoreResults", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasMoreResults: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasMoreResults)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasMoreResults (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasMoreResults: ", p), err)
	}
	return err
}

func (p *FetchResultsResp) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryDataSet() {
		if err := oprot.WriteFieldBegin("queryDataSet", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:queryDataSet: ", p), err)
		}
		if err := p.QueryDataSet.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryDataSet), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:queryDataSet: ", p), err)
		}
	}
	return err
}

func (p *FetchResultsResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchResultsResp(%+v)", *p)
}

// Attributes:
//  - TaskType
//  - DataFlowType
//  - Timeout
//  - Sql
//  - PyTaskName
type TaskInfo struct {
	TaskType     TaskType     `thrift:"taskType,1,required" db:"taskType" json:"taskType"`
	DataFlowType DataFlowType `thrift:"dataFlowType,2,required" db:"dataFlowType" json:"dataFlowType"`
	Timeout      *int64       `thrift:"timeout,3" db:"timeout" json:"timeout,omitempty"`
	Sql          *string      `thrift:"sql,4" db:"sql" json:"sql,omitempty"`
	PyTaskName   *string      `thrift:"pyTaskName,5" db:"pyTaskName" json:"pyTaskName,omitempty"`
}

func NewTaskInfo() *TaskInfo {
	return &TaskInfo{}
}

func (p *TaskInfo) GetTaskType() TaskType {
	return p.TaskType
}

func (p *TaskInfo) GetDataFlowType() DataFlowType {
	return p.DataFlowType
}

var TaskInfo_Timeout_DEFAULT int64

func (p *TaskInfo) GetTimeout() int64 {
	if !p.IsSetTimeout() {
		return TaskInfo_Timeout_DEFAULT
	}
	return *p.Timeout
}

var TaskInfo_Sql_DEFAULT string

func (p *TaskInfo) GetSql() string {
	if !p.IsSetSql() {
		return TaskInfo_Sql_DEFAULT
	}
	return *p.Sql
}

var TaskInfo_PyTaskName_DEFAULT string

func (p *TaskInfo) GetPyTaskName() string {
	if !p.IsSetPyTaskName() {
		return TaskInfo_PyTaskName_DEFAULT
	}
	return *p.PyTaskName
}
func (p *TaskInfo) IsSetTimeout() bool {
	return p.Timeout != nil
}

func (p *TaskInfo) IsSetSql() bool {
	return p.Sql != nil
}

func (p *TaskInfo) IsSetPyTaskName() bool {
	return p.PyTaskName != nil
}

func (p *TaskInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTaskType bool = false
	var issetDataFlowType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetTaskType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetDataFlowType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTaskType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskType is not set"))
	}
	if !issetDataFlowType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataFlowType is not set"))
	}
	return nil
}

func (p *TaskInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TaskType(v)
		p.TaskType = temp
	}
	return nil
}

func (p *TaskInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DataFlowType(v)
		p.DataFlowType = temp
	}
	return nil
}

func (p *TaskInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timeout = &v
	}
	return nil
}

func (p *TaskInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Sql = &v
	}
	return nil
}

func (p *TaskInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PyTaskName = &v
	}
	return nil
}

func (p *TaskInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TaskInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TaskInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.taskType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskType: ", p), err)
	}
	return err
}

func (p *TaskInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataFlowType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataFlowType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DataFlowType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dataFlowType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataFlowType: ", p), err)
	}
	return err
}

func (p *TaskInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeout() {
		if err := oprot.WriteFieldBegin("timeout", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeout: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timeout)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeout (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeout: ", p), err)
		}
	}
	return err
}

func (p *TaskInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSql() {
		if err := oprot.WriteFieldBegin("sql", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sql: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sql)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sql (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sql: ", p), err)
		}
	}
	return err
}

func (p *TaskInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPyTaskName() {
		if err := oprot.WriteFieldBegin("pyTaskName", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pyTaskName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PyTaskName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pyTaskName (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pyTaskName: ", p), err)
		}
	}
	return err
}

func (p *TaskInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskInfo(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - TaskList
//  - ExportType
//  - FileName
type CommitTransformJobReq struct {
	SessionId  int64       `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	TaskList   []*TaskInfo `thrift:"taskList,2,required" db:"taskList" json:"taskList"`
	ExportType ExportType  `thrift:"exportType,3,required" db:"exportType" json:"exportType"`
	FileName   *string     `thrift:"fileName,4" db:"fileName" json:"fileName,omitempty"`
}

func NewCommitTransformJobReq() *CommitTransformJobReq {
	return &CommitTransformJobReq{}
}

func (p *CommitTransformJobReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *CommitTransformJobReq) GetTaskList() []*TaskInfo {
	return p.TaskList
}

func (p *CommitTransformJobReq) GetExportType() ExportType {
	return p.ExportType
}

var CommitTransformJobReq_FileName_DEFAULT string

func (p *CommitTransformJobReq) GetFileName() string {
	if !p.IsSetFileName() {
		return CommitTransformJobReq_FileName_DEFAULT
	}
	return *p.FileName
}
func (p *CommitTransformJobReq) IsSetFileName() bool {
	return p.FileName != nil
}

func (p *CommitTransformJobReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetTaskList bool = false
	var issetExportType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetTaskList = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetExportType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetTaskList {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskList is not set"))
	}
	if !issetExportType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExportType is not set"))
	}
	return nil
}

func (p *CommitTransformJobReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *CommitTransformJobReq) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TaskInfo, 0, size)
	p.TaskList = tSlice
	for i := 0; i < size; i++ {
		_elem103 := &TaskInfo{}
		if err := _elem103.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem103), err)
		}
		p.TaskList = append(p.TaskList, _elem103)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CommitTransformJobReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := ExportType(v)
		p.ExportType = temp
	}
	return nil
}

func (p *CommitTransformJobReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FileName = &v
	}
	return nil
}

func (p *CommitTransformJobReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommitTransformJobReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CommitTransformJobReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *CommitTransformJobReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TaskList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TaskList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskList: ", p), err)
	}
	return err
}

func (p *CommitTransformJobReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exportType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:exportType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ExportType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.exportType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:exportType: ", p), err)
	}
	return err
}

func (p *CommitTransformJobReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileName() {
		if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fileName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FileName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileName (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fileName: ", p), err)
		}
	}
	return err
}

func (p *CommitTransformJobReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitTransformJobReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - JobId
type CommitTransformJobResp struct {
	Status *Status `thrift:"status,1,required" db:"status" json:"status"`
	JobId  int64   `thrift:"jobId,2,required" db:"jobId" json:"jobId"`
}

func NewCommitTransformJobResp() *CommitTransformJobResp {
	return &CommitTransformJobResp{}
}

var CommitTransformJobResp_Status_DEFAULT *Status

func (p *CommitTransformJobResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return CommitTransformJobResp_Status_DEFAULT
	}
	return p.Status
}

func (p *CommitTransformJobResp) GetJobId() int64 {
	return p.JobId
}
func (p *CommitTransformJobResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *CommitTransformJobResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetJobId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetJobId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetJobId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobId is not set"))
	}
	return nil
}

func (p *CommitTransformJobResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *CommitTransformJobResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.JobId = v
	}
	return nil
}

func (p *CommitTransformJobResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CommitTransformJobResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CommitTransformJobResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *CommitTransformJobResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jobId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JobId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jobId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobId: ", p), err)
	}
	return err
}

func (p *CommitTransformJobResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitTransformJobResp(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - JobId
type QueryTransformJobStatusReq struct {
	SessionId int64 `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	JobId     int64 `thrift:"jobId,2,required" db:"jobId" json:"jobId"`
}

func NewQueryTransformJobStatusReq() *QueryTransformJobStatusReq {
	return &QueryTransformJobStatusReq{}
}

func (p *QueryTransformJobStatusReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *QueryTransformJobStatusReq) GetJobId() int64 {
	return p.JobId
}
func (p *QueryTransformJobStatusReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetJobId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetJobId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetJobId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobId is not set"))
	}
	return nil
}

func (p *QueryTransformJobStatusReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *QueryTransformJobStatusReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.JobId = v
	}
	return nil
}

func (p *QueryTransformJobStatusReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTransformJobStatusReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryTransformJobStatusReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *QueryTransformJobStatusReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jobId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JobId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jobId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobId: ", p), err)
	}
	return err
}

func (p *QueryTransformJobStatusReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTransformJobStatusReq(%+v)", *p)
}

// Attributes:
//  - Status
//  - JobState
type QueryTransformJobStatusResp struct {
	Status   *Status  `thrift:"status,1,required" db:"status" json:"status"`
	JobState JobState `thrift:"jobState,2,required" db:"jobState" json:"jobState"`
}

func NewQueryTransformJobStatusResp() *QueryTransformJobStatusResp {
	return &QueryTransformJobStatusResp{}
}

var QueryTransformJobStatusResp_Status_DEFAULT *Status

func (p *QueryTransformJobStatusResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return QueryTransformJobStatusResp_Status_DEFAULT
	}
	return p.Status
}

func (p *QueryTransformJobStatusResp) GetJobState() JobState {
	return p.JobState
}
func (p *QueryTransformJobStatusResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *QueryTransformJobStatusResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false
	var issetJobState bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetJobState = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	if !issetJobState {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobState is not set"))
	}
	return nil
}

func (p *QueryTransformJobStatusResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *QueryTransformJobStatusResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := JobState(v)
		p.JobState = temp
	}
	return nil
}

func (p *QueryTransformJobStatusResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTransformJobStatusResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryTransformJobStatusResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *QueryTransformJobStatusResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jobState", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobState: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.JobState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jobState (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobState: ", p), err)
	}
	return err
}

func (p *QueryTransformJobStatusResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTransformJobStatusResp(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - JobId
type CancelTransformJobReq struct {
	SessionId int64 `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	JobId     int64 `thrift:"jobId,2,required" db:"jobId" json:"jobId"`
}

func NewCancelTransformJobReq() *CancelTransformJobReq {
	return &CancelTransformJobReq{}
}

func (p *CancelTransformJobReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *CancelTransformJobReq) GetJobId() int64 {
	return p.JobId
}
func (p *CancelTransformJobReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetJobId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetJobId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetJobId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JobId is not set"))
	}
	return nil
}

func (p *CancelTransformJobReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *CancelTransformJobReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.JobId = v
	}
	return nil
}

func (p *CancelTransformJobReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CancelTransformJobReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CancelTransformJobReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *CancelTransformJobReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("jobId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.JobId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.jobId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobId: ", p), err)
	}
	return err
}

func (p *CancelTransformJobReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelTransformJobReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Name
//  - FilePath
//  - ClassName
//  - Type
type RegisterTaskReq struct {
	SessionId int64   `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Name      string  `thrift:"name,2,required" db:"name" json:"name"`
	FilePath  string  `thrift:"filePath,3,required" db:"filePath" json:"filePath"`
	ClassName string  `thrift:"className,4,required" db:"className" json:"className"`
	Type      UDFType `thrift:"type,5,required" db:"type" json:"type"`
}

func NewRegisterTaskReq() *RegisterTaskReq {
	return &RegisterTaskReq{}
}

func (p *RegisterTaskReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *RegisterTaskReq) GetName() string {
	return p.Name
}

func (p *RegisterTaskReq) GetFilePath() string {
	return p.FilePath
}

func (p *RegisterTaskReq) GetClassName() string {
	return p.ClassName
}

func (p *RegisterTaskReq) GetType() UDFType {
	return p.Type
}
func (p *RegisterTaskReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetName bool = false
	var issetFilePath bool = false
	var issetClassName bool = false
	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetFilePath = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetClassName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetFilePath {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FilePath is not set"))
	}
	if !issetClassName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClassName is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *RegisterTaskReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *RegisterTaskReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *RegisterTaskReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FilePath = v
	}
	return nil
}

func (p *RegisterTaskReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *RegisterTaskReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := UDFType(v)
		p.Type = temp
	}
	return nil
}

func (p *RegisterTaskReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterTaskReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegisterTaskReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *RegisterTaskReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *RegisterTaskReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filePath", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:filePath: ", p), err)
	}
	if err := oprot.WriteString(string(p.FilePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.filePath (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:filePath: ", p), err)
	}
	return err
}

func (p *RegisterTaskReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("className", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:className: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.className (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:className: ", p), err)
	}
	return err
}

func (p *RegisterTaskReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err)
	}
	return err
}

func (p *RegisterTaskReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterTaskReq(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Name
type DropTaskReq struct {
	SessionId int64  `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
	Name      string `thrift:"name,2,required" db:"name" json:"name"`
}

func NewDropTaskReq() *DropTaskReq {
	return &DropTaskReq{}
}

func (p *DropTaskReq) GetSessionId() int64 {
	return p.SessionId
}

func (p *DropTaskReq) GetName() string {
	return p.Name
}
func (p *DropTaskReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false
	var issetName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	return nil
}

func (p *DropTaskReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *DropTaskReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *DropTaskReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DropTaskReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DropTaskReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *DropTaskReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *DropTaskReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTaskReq(%+v)", *p)
}

// Attributes:
//  - SessionId
type GetRegisterTaskInfoReq struct {
	SessionId int64 `thrift:"sessionId,1,required" db:"sessionId" json:"sessionId"`
}

func NewGetRegisterTaskInfoReq() *GetRegisterTaskInfoReq {
	return &GetRegisterTaskInfoReq{}
}

func (p *GetRegisterTaskInfoReq) GetSessionId() int64 {
	return p.SessionId
}
func (p *GetRegisterTaskInfoReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetSessionId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetSessionId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetSessionId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionId is not set"))
	}
	return nil
}

func (p *GetRegisterTaskInfoReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *GetRegisterTaskInfoReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRegisterTaskInfoReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetRegisterTaskInfoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *GetRegisterTaskInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRegisterTaskInfoReq(%+v)", *p)
}

// Attributes:
//  - Name
//  - ClassName
//  - FileName
//  - IP
//  - Type
type RegisterTaskInfo struct {
	Name      string  `thrift:"name,1,required" db:"name" json:"name"`
	ClassName string  `thrift:"className,2,required" db:"className" json:"className"`
	FileName  string  `thrift:"fileName,3,required" db:"fileName" json:"fileName"`
	IP        string  `thrift:"ip,4,required" db:"ip" json:"ip"`
	Type      UDFType `thrift:"type,5,required" db:"type" json:"type"`
}

func NewRegisterTaskInfo() *RegisterTaskInfo {
	return &RegisterTaskInfo{}
}

func (p *RegisterTaskInfo) GetName() string {
	return p.Name
}

func (p *RegisterTaskInfo) GetClassName() string {
	return p.ClassName
}

func (p *RegisterTaskInfo) GetFileName() string {
	return p.FileName
}

func (p *RegisterTaskInfo) GetIP() string {
	return p.IP
}

func (p *RegisterTaskInfo) GetType() UDFType {
	return p.Type
}
func (p *RegisterTaskInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetClassName bool = false
	var issetFileName bool = false
	var issetIP bool = false
	var issetType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetClassName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetFileName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
				issetIP = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
				issetType = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetClassName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClassName is not set"))
	}
	if !issetFileName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FileName is not set"))
	}
	if !issetIP {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"))
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	return nil
}

func (p *RegisterTaskInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *RegisterTaskInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *RegisterTaskInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *RegisterTaskInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *RegisterTaskInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := UDFType(v)
		p.Type = temp
	}
	return nil
}

func (p *RegisterTaskInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterTaskInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegisterTaskInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *RegisterTaskInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("className", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:className: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.className (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:className: ", p), err)
	}
	return err
}

func (p *RegisterTaskInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fileName: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fileName: ", p), err)
	}
	return err
}

func (p *RegisterTaskInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err)
	}
	return err
}

func (p *RegisterTaskInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err)
	}
	return err
}

func (p *RegisterTaskInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterTaskInfo(%+v)", *p)
}

// Attributes:
//  - Status
//  - RegisterTaskInfoList
type GetRegisterTaskInfoResp struct {
	Status               *Status             `thrift:"status,1,required" db:"status" json:"status"`
	RegisterTaskInfoList []*RegisterTaskInfo `thrift:"registerTaskInfoList,2" db:"registerTaskInfoList" json:"registerTaskInfoList,omitempty"`
}

func NewGetRegisterTaskInfoResp() *GetRegisterTaskInfoResp {
	return &GetRegisterTaskInfoResp{}
}

var GetRegisterTaskInfoResp_Status_DEFAULT *Status

func (p *GetRegisterTaskInfoResp) GetStatus() *Status {
	if !p.IsSetStatus() {
		return GetRegisterTaskInfoResp_Status_DEFAULT
	}
	return p.Status
}

var GetRegisterTaskInfoResp_RegisterTaskInfoList_DEFAULT []*RegisterTaskInfo

func (p *GetRegisterTaskInfoResp) GetRegisterTaskInfoList() []*RegisterTaskInfo {
	return p.RegisterTaskInfoList
}
func (p *GetRegisterTaskInfoResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetRegisterTaskInfoResp) IsSetRegisterTaskInfoList() bool {
	return p.RegisterTaskInfoList != nil
}

func (p *GetRegisterTaskInfoResp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetStatus = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *GetRegisterTaskInfoResp) ReadField1(iprot thrift.TProtocol) error {
	p.Status = &Status{}
	if err := p.Status.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
	}
	return nil
}

func (p *GetRegisterTaskInfoResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RegisterTaskInfo, 0, size)
	p.RegisterTaskInfoList = tSlice
	for i := 0; i < size; i++ {
		_elem104 := &RegisterTaskInfo{}
		if err := _elem104.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem104), err)
		}
		p.RegisterTaskInfoList = append(p.RegisterTaskInfoList, _elem104)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetRegisterTaskInfoResp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRegisterTaskInfoResp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetRegisterTaskInfoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := p.Status.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *GetRegisterTaskInfoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegisterTaskInfoList() {
		if err := oprot.WriteFieldBegin("registerTaskInfoList", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:registerTaskInfoList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RegisterTaskInfoList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RegisterTaskInfoList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:registerTaskInfoList: ", p), err)
		}
	}
	return err
}

func (p *GetRegisterTaskInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRegisterTaskInfoResp(%+v)", *p)
}

type IService interface {
	// Parameters:
	//  - Req
	OpenSession(ctx context.Context, req *OpenSessionReq) (r *OpenSessionResp, err error)
	// Parameters:
	//  - Req
	CloseSession(ctx context.Context, req *CloseSessionReq) (r *Status, err error)
	// Parameters:
	//  - Req
	DeleteColumns(ctx context.Context, req *DeleteColumnsReq) (r *Status, err error)
	// Parameters:
	//  - Req
	InsertColumnRecords(ctx context.Context, req *InsertColumnRecordsReq) (r *Status, err error)
	// Parameters:
	//  - Req
	InsertNonAlignedColumnRecords(ctx context.Context, req *InsertNonAlignedColumnRecordsReq) (r *Status, err error)
	// Parameters:
	//  - Req
	InsertRowRecords(ctx context.Context, req *InsertRowRecordsReq) (r *Status, err error)
	// Parameters:
	//  - Req
	InsertNonAlignedRowRecords(ctx context.Context, req *InsertNonAlignedRowRecordsReq) (r *Status, err error)
	// Parameters:
	//  - Req
	DeleteDataInColumns(ctx context.Context, req *DeleteDataInColumnsReq) (r *Status, err error)
	// Parameters:
	//  - Req
	QueryData(ctx context.Context, req *QueryDataReq) (r *QueryDataResp, err error)
	// Parameters:
	//  - Req
	AddStorageEngines(ctx context.Context, req *AddStorageEnginesReq) (r *Status, err error)
	// Parameters:
	//  - Req
	AggregateQuery(ctx context.Context, req *AggregateQueryReq) (r *AggregateQueryResp, err error)
	// Parameters:
	//  - Req
	LastQuery(ctx context.Context, req *LastQueryReq) (r *LastQueryResp, err error)
	// Parameters:
	//  - Req
	DownsampleQuery(ctx context.Context, req *DownsampleQueryReq) (r *DownsampleQueryResp, err error)
	// Parameters:
	//  - Req
	ShowColumns(ctx context.Context, req *ShowColumnsReq) (r *ShowColumnsResp, err error)
	// Parameters:
	//  - Req
	GetReplicaNum(ctx context.Context, req *GetReplicaNumReq) (r *GetReplicaNumResp, err error)
	// Parameters:
	//  - Req
	ExecuteSql(ctx context.Context, req *ExecuteSqlReq) (r *ExecuteSqlResp, err error)
	// Parameters:
	//  - Req
	UpdateUser(ctx context.Context, req *UpdateUserReq) (r *Status, err error)
	// Parameters:
	//  - Req
	AddUser(ctx context.Context, req *AddUserReq) (r *Status, err error)
	// Parameters:
	//  - Req
	DeleteUser(ctx context.Context, req *DeleteUserReq) (r *Status, err error)
	// Parameters:
	//  - Req
	GetUser(ctx context.Context, req *GetUserReq) (r *GetUserResp, err error)
	// Parameters:
	//  - Req
	GetClusterInfo(ctx context.Context, req *GetClusterInfoReq) (r *GetClusterInfoResp, err error)
	// Parameters:
	//  - Req
	ExecuteStatement(ctx context.Context, req *ExecuteStatementReq) (r *ExecuteStatementResp, err error)
	// Parameters:
	//  - Req
	FetchResults(ctx context.Context, req *FetchResultsReq) (r *FetchResultsResp, err error)
	// Parameters:
	//  - Req
	CloseStatement(ctx context.Context, req *CloseStatementReq) (r *Status, err error)
	// Parameters:
	//  - Req
	CommitTransformJob(ctx context.Context, req *CommitTransformJobReq) (r *CommitTransformJobResp, err error)
	// Parameters:
	//  - Req
	QueryTransformJobStatus(ctx context.Context, req *QueryTransformJobStatusReq) (r *QueryTransformJobStatusResp, err error)
	// Parameters:
	//  - Req
	CancelTransformJob(ctx context.Context, req *CancelTransformJobReq) (r *Status, err error)
	// Parameters:
	//  - Req
	RegisterTask(ctx context.Context, req *RegisterTaskReq) (r *Status, err error)
	// Parameters:
	//  - Req
	DropTask(ctx context.Context, req *DropTaskReq) (r *Status, err error)
	// Parameters:
	//  - Req
	GetRegisterTaskInfo(ctx context.Context, req *GetRegisterTaskInfoReq) (r *GetRegisterTaskInfoResp, err error)
}

type IServiceClient struct {
	c thrift.TClient
}

func NewIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IServiceClient {
	return &IServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IServiceClient {
	return &IServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewIServiceClient(c thrift.TClient) *IServiceClient {
	return &IServiceClient{
		c: c,
	}
}

func (p *IServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Req
func (p *IServiceClient) OpenSession(ctx context.Context, req *OpenSessionReq) (r *OpenSessionResp, err error) {
	var _args105 IServiceOpenSessionArgs
	_args105.Req = req
	var _result106 IServiceOpenSessionResult
	if err = p.Client_().Call(ctx, "openSession", &_args105, &_result106); err != nil {
		return
	}
	return _result106.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) CloseSession(ctx context.Context, req *CloseSessionReq) (r *Status, err error) {
	var _args107 IServiceCloseSessionArgs
	_args107.Req = req
	var _result108 IServiceCloseSessionResult
	if err = p.Client_().Call(ctx, "closeSession", &_args107, &_result108); err != nil {
		return
	}
	return _result108.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) DeleteColumns(ctx context.Context, req *DeleteColumnsReq) (r *Status, err error) {
	var _args109 IServiceDeleteColumnsArgs
	_args109.Req = req
	var _result110 IServiceDeleteColumnsResult
	if err = p.Client_().Call(ctx, "deleteColumns", &_args109, &_result110); err != nil {
		return
	}
	return _result110.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) InsertColumnRecords(ctx context.Context, req *InsertColumnRecordsReq) (r *Status, err error) {
	var _args111 IServiceInsertColumnRecordsArgs
	_args111.Req = req
	var _result112 IServiceInsertColumnRecordsResult
	if err = p.Client_().Call(ctx, "insertColumnRecords", &_args111, &_result112); err != nil {
		return
	}
	return _result112.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) InsertNonAlignedColumnRecords(ctx context.Context, req *InsertNonAlignedColumnRecordsReq) (r *Status, err error) {
	var _args113 IServiceInsertNonAlignedColumnRecordsArgs
	_args113.Req = req
	var _result114 IServiceInsertNonAlignedColumnRecordsResult
	if err = p.Client_().Call(ctx, "insertNonAlignedColumnRecords", &_args113, &_result114); err != nil {
		return
	}
	return _result114.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) InsertRowRecords(ctx context.Context, req *InsertRowRecordsReq) (r *Status, err error) {
	var _args115 IServiceInsertRowRecordsArgs
	_args115.Req = req
	var _result116 IServiceInsertRowRecordsResult
	if err = p.Client_().Call(ctx, "insertRowRecords", &_args115, &_result116); err != nil {
		return
	}
	return _result116.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) InsertNonAlignedRowRecords(ctx context.Context, req *InsertNonAlignedRowRecordsReq) (r *Status, err error) {
	var _args117 IServiceInsertNonAlignedRowRecordsArgs
	_args117.Req = req
	var _result118 IServiceInsertNonAlignedRowRecordsResult
	if err = p.Client_().Call(ctx, "insertNonAlignedRowRecords", &_args117, &_result118); err != nil {
		return
	}
	return _result118.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) DeleteDataInColumns(ctx context.Context, req *DeleteDataInColumnsReq) (r *Status, err error) {
	var _args119 IServiceDeleteDataInColumnsArgs
	_args119.Req = req
	var _result120 IServiceDeleteDataInColumnsResult
	if err = p.Client_().Call(ctx, "deleteDataInColumns", &_args119, &_result120); err != nil {
		return
	}
	return _result120.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) QueryData(ctx context.Context, req *QueryDataReq) (r *QueryDataResp, err error) {
	var _args121 IServiceQueryDataArgs
	_args121.Req = req
	var _result122 IServiceQueryDataResult
	if err = p.Client_().Call(ctx, "queryData", &_args121, &_result122); err != nil {
		return
	}
	return _result122.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) AddStorageEngines(ctx context.Context, req *AddStorageEnginesReq) (r *Status, err error) {
	var _args123 IServiceAddStorageEnginesArgs
	_args123.Req = req
	var _result124 IServiceAddStorageEnginesResult
	if err = p.Client_().Call(ctx, "addStorageEngines", &_args123, &_result124); err != nil {
		return
	}
	return _result124.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) AggregateQuery(ctx context.Context, req *AggregateQueryReq) (r *AggregateQueryResp, err error) {
	var _args125 IServiceAggregateQueryArgs
	_args125.Req = req
	var _result126 IServiceAggregateQueryResult
	if err = p.Client_().Call(ctx, "aggregateQuery", &_args125, &_result126); err != nil {
		return
	}
	return _result126.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) LastQuery(ctx context.Context, req *LastQueryReq) (r *LastQueryResp, err error) {
	var _args127 IServiceLastQueryArgs
	_args127.Req = req
	var _result128 IServiceLastQueryResult
	if err = p.Client_().Call(ctx, "lastQuery", &_args127, &_result128); err != nil {
		return
	}
	return _result128.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) DownsampleQuery(ctx context.Context, req *DownsampleQueryReq) (r *DownsampleQueryResp, err error) {
	var _args129 IServiceDownsampleQueryArgs
	_args129.Req = req
	var _result130 IServiceDownsampleQueryResult
	if err = p.Client_().Call(ctx, "downsampleQuery", &_args129, &_result130); err != nil {
		return
	}
	return _result130.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) ShowColumns(ctx context.Context, req *ShowColumnsReq) (r *ShowColumnsResp, err error) {
	var _args131 IServiceShowColumnsArgs
	_args131.Req = req
	var _result132 IServiceShowColumnsResult
	if err = p.Client_().Call(ctx, "showColumns", &_args131, &_result132); err != nil {
		return
	}
	return _result132.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) GetReplicaNum(ctx context.Context, req *GetReplicaNumReq) (r *GetReplicaNumResp, err error) {
	var _args133 IServiceGetReplicaNumArgs
	_args133.Req = req
	var _result134 IServiceGetReplicaNumResult
	if err = p.Client_().Call(ctx, "getReplicaNum", &_args133, &_result134); err != nil {
		return
	}
	return _result134.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) ExecuteSql(ctx context.Context, req *ExecuteSqlReq) (r *ExecuteSqlResp, err error) {
	var _args135 IServiceExecuteSqlArgs
	_args135.Req = req
	var _result136 IServiceExecuteSqlResult
	if err = p.Client_().Call(ctx, "executeSql", &_args135, &_result136); err != nil {
		return
	}
	return _result136.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) UpdateUser(ctx context.Context, req *UpdateUserReq) (r *Status, err error) {
	var _args137 IServiceUpdateUserArgs
	_args137.Req = req
	var _result138 IServiceUpdateUserResult
	if err = p.Client_().Call(ctx, "updateUser", &_args137, &_result138); err != nil {
		return
	}
	return _result138.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) AddUser(ctx context.Context, req *AddUserReq) (r *Status, err error) {
	var _args139 IServiceAddUserArgs
	_args139.Req = req
	var _result140 IServiceAddUserResult
	if err = p.Client_().Call(ctx, "addUser", &_args139, &_result140); err != nil {
		return
	}
	return _result140.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) DeleteUser(ctx context.Context, req *DeleteUserReq) (r *Status, err error) {
	var _args141 IServiceDeleteUserArgs
	_args141.Req = req
	var _result142 IServiceDeleteUserResult
	if err = p.Client_().Call(ctx, "deleteUser", &_args141, &_result142); err != nil {
		return
	}
	return _result142.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) GetUser(ctx context.Context, req *GetUserReq) (r *GetUserResp, err error) {
	var _args143 IServiceGetUserArgs
	_args143.Req = req
	var _result144 IServiceGetUserResult
	if err = p.Client_().Call(ctx, "getUser", &_args143, &_result144); err != nil {
		return
	}
	return _result144.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) GetClusterInfo(ctx context.Context, req *GetClusterInfoReq) (r *GetClusterInfoResp, err error) {
	var _args145 IServiceGetClusterInfoArgs
	_args145.Req = req
	var _result146 IServiceGetClusterInfoResult
	if err = p.Client_().Call(ctx, "getClusterInfo", &_args145, &_result146); err != nil {
		return
	}
	return _result146.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) ExecuteStatement(ctx context.Context, req *ExecuteStatementReq) (r *ExecuteStatementResp, err error) {
	var _args147 IServiceExecuteStatementArgs
	_args147.Req = req
	var _result148 IServiceExecuteStatementResult
	if err = p.Client_().Call(ctx, "executeStatement", &_args147, &_result148); err != nil {
		return
	}
	return _result148.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) FetchResults(ctx context.Context, req *FetchResultsReq) (r *FetchResultsResp, err error) {
	var _args149 IServiceFetchResultsArgs
	_args149.Req = req
	var _result150 IServiceFetchResultsResult
	if err = p.Client_().Call(ctx, "fetchResults", &_args149, &_result150); err != nil {
		return
	}
	return _result150.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) CloseStatement(ctx context.Context, req *CloseStatementReq) (r *Status, err error) {
	var _args151 IServiceCloseStatementArgs
	_args151.Req = req
	var _result152 IServiceCloseStatementResult
	if err = p.Client_().Call(ctx, "closeStatement", &_args151, &_result152); err != nil {
		return
	}
	return _result152.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) CommitTransformJob(ctx context.Context, req *CommitTransformJobReq) (r *CommitTransformJobResp, err error) {
	var _args153 IServiceCommitTransformJobArgs
	_args153.Req = req
	var _result154 IServiceCommitTransformJobResult
	if err = p.Client_().Call(ctx, "commitTransformJob", &_args153, &_result154); err != nil {
		return
	}
	return _result154.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) QueryTransformJobStatus(ctx context.Context, req *QueryTransformJobStatusReq) (r *QueryTransformJobStatusResp, err error) {
	var _args155 IServiceQueryTransformJobStatusArgs
	_args155.Req = req
	var _result156 IServiceQueryTransformJobStatusResult
	if err = p.Client_().Call(ctx, "queryTransformJobStatus", &_args155, &_result156); err != nil {
		return
	}
	return _result156.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) CancelTransformJob(ctx context.Context, req *CancelTransformJobReq) (r *Status, err error) {
	var _args157 IServiceCancelTransformJobArgs
	_args157.Req = req
	var _result158 IServiceCancelTransformJobResult
	if err = p.Client_().Call(ctx, "cancelTransformJob", &_args157, &_result158); err != nil {
		return
	}
	return _result158.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) RegisterTask(ctx context.Context, req *RegisterTaskReq) (r *Status, err error) {
	var _args159 IServiceRegisterTaskArgs
	_args159.Req = req
	var _result160 IServiceRegisterTaskResult
	if err = p.Client_().Call(ctx, "registerTask", &_args159, &_result160); err != nil {
		return
	}
	return _result160.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) DropTask(ctx context.Context, req *DropTaskReq) (r *Status, err error) {
	var _args161 IServiceDropTaskArgs
	_args161.Req = req
	var _result162 IServiceDropTaskResult
	if err = p.Client_().Call(ctx, "dropTask", &_args161, &_result162); err != nil {
		return
	}
	return _result162.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *IServiceClient) GetRegisterTaskInfo(ctx context.Context, req *GetRegisterTaskInfoReq) (r *GetRegisterTaskInfoResp, err error) {
	var _args163 IServiceGetRegisterTaskInfoArgs
	_args163.Req = req
	var _result164 IServiceGetRegisterTaskInfoResult
	if err = p.Client_().Call(ctx, "getRegisterTaskInfo", &_args163, &_result164); err != nil {
		return
	}
	return _result164.GetSuccess(), nil
}

type IServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      IService
}

func (p *IServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewIServiceProcessor(handler IService) *IServiceProcessor {

	self165 := &IServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self165.processorMap["openSession"] = &iServiceProcessorOpenSession{handler: handler}
	self165.processorMap["closeSession"] = &iServiceProcessorCloseSession{handler: handler}
	self165.processorMap["deleteColumns"] = &iServiceProcessorDeleteColumns{handler: handler}
	self165.processorMap["insertColumnRecords"] = &iServiceProcessorInsertColumnRecords{handler: handler}
	self165.processorMap["insertNonAlignedColumnRecords"] = &iServiceProcessorInsertNonAlignedColumnRecords{handler: handler}
	self165.processorMap["insertRowRecords"] = &iServiceProcessorInsertRowRecords{handler: handler}
	self165.processorMap["insertNonAlignedRowRecords"] = &iServiceProcessorInsertNonAlignedRowRecords{handler: handler}
	self165.processorMap["deleteDataInColumns"] = &iServiceProcessorDeleteDataInColumns{handler: handler}
	self165.processorMap["queryData"] = &iServiceProcessorQueryData{handler: handler}
	self165.processorMap["addStorageEngines"] = &iServiceProcessorAddStorageEngines{handler: handler}
	self165.processorMap["aggregateQuery"] = &iServiceProcessorAggregateQuery{handler: handler}
	self165.processorMap["lastQuery"] = &iServiceProcessorLastQuery{handler: handler}
	self165.processorMap["downsampleQuery"] = &iServiceProcessorDownsampleQuery{handler: handler}
	self165.processorMap["showColumns"] = &iServiceProcessorShowColumns{handler: handler}
	self165.processorMap["getReplicaNum"] = &iServiceProcessorGetReplicaNum{handler: handler}
	self165.processorMap["executeSql"] = &iServiceProcessorExecuteSql{handler: handler}
	self165.processorMap["updateUser"] = &iServiceProcessorUpdateUser{handler: handler}
	self165.processorMap["addUser"] = &iServiceProcessorAddUser{handler: handler}
	self165.processorMap["deleteUser"] = &iServiceProcessorDeleteUser{handler: handler}
	self165.processorMap["getUser"] = &iServiceProcessorGetUser{handler: handler}
	self165.processorMap["getClusterInfo"] = &iServiceProcessorGetClusterInfo{handler: handler}
	self165.processorMap["executeStatement"] = &iServiceProcessorExecuteStatement{handler: handler}
	self165.processorMap["fetchResults"] = &iServiceProcessorFetchResults{handler: handler}
	self165.processorMap["closeStatement"] = &iServiceProcessorCloseStatement{handler: handler}
	self165.processorMap["commitTransformJob"] = &iServiceProcessorCommitTransformJob{handler: handler}
	self165.processorMap["queryTransformJobStatus"] = &iServiceProcessorQueryTransformJobStatus{handler: handler}
	self165.processorMap["cancelTransformJob"] = &iServiceProcessorCancelTransformJob{handler: handler}
	self165.processorMap["registerTask"] = &iServiceProcessorRegisterTask{handler: handler}
	self165.processorMap["dropTask"] = &iServiceProcessorDropTask{handler: handler}
	self165.processorMap["getRegisterTaskInfo"] = &iServiceProcessorGetRegisterTaskInfo{handler: handler}
	return self165
}

func (p *IServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x166 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x166.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x166

}

type iServiceProcessorOpenSession struct {
	handler IService
}

func (p *iServiceProcessorOpenSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceOpenSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("openSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceOpenSessionResult{}
	var retval *OpenSessionResp
	var err2 error
	if retval, err2 = p.handler.OpenSession(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openSession: "+err2.Error())
		oprot.WriteMessageBegin("openSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("openSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorCloseSession struct {
	handler IService
}

func (p *iServiceProcessorCloseSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceCloseSessionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("closeSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceCloseSessionResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.CloseSession(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeSession: "+err2.Error())
		oprot.WriteMessageBegin("closeSession", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("closeSession", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorDeleteColumns struct {
	handler IService
}

func (p *iServiceProcessorDeleteColumns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceDeleteColumnsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceDeleteColumnsResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.DeleteColumns(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteColumns: "+err2.Error())
		oprot.WriteMessageBegin("deleteColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deleteColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorInsertColumnRecords struct {
	handler IService
}

func (p *iServiceProcessorInsertColumnRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceInsertColumnRecordsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("insertColumnRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceInsertColumnRecordsResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.InsertColumnRecords(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertColumnRecords: "+err2.Error())
		oprot.WriteMessageBegin("insertColumnRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("insertColumnRecords", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorInsertNonAlignedColumnRecords struct {
	handler IService
}

func (p *iServiceProcessorInsertNonAlignedColumnRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceInsertNonAlignedColumnRecordsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("insertNonAlignedColumnRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceInsertNonAlignedColumnRecordsResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.InsertNonAlignedColumnRecords(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertNonAlignedColumnRecords: "+err2.Error())
		oprot.WriteMessageBegin("insertNonAlignedColumnRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("insertNonAlignedColumnRecords", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorInsertRowRecords struct {
	handler IService
}

func (p *iServiceProcessorInsertRowRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceInsertRowRecordsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("insertRowRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceInsertRowRecordsResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.InsertRowRecords(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertRowRecords: "+err2.Error())
		oprot.WriteMessageBegin("insertRowRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("insertRowRecords", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorInsertNonAlignedRowRecords struct {
	handler IService
}

func (p *iServiceProcessorInsertNonAlignedRowRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceInsertNonAlignedRowRecordsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("insertNonAlignedRowRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceInsertNonAlignedRowRecordsResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.InsertNonAlignedRowRecords(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertNonAlignedRowRecords: "+err2.Error())
		oprot.WriteMessageBegin("insertNonAlignedRowRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("insertNonAlignedRowRecords", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorDeleteDataInColumns struct {
	handler IService
}

func (p *iServiceProcessorDeleteDataInColumns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceDeleteDataInColumnsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteDataInColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceDeleteDataInColumnsResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.DeleteDataInColumns(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDataInColumns: "+err2.Error())
		oprot.WriteMessageBegin("deleteDataInColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deleteDataInColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorQueryData struct {
	handler IService
}

func (p *iServiceProcessorQueryData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceQueryDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceQueryDataResult{}
	var retval *QueryDataResp
	var err2 error
	if retval, err2 = p.handler.QueryData(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryData: "+err2.Error())
		oprot.WriteMessageBegin("queryData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorAddStorageEngines struct {
	handler IService
}

func (p *iServiceProcessorAddStorageEngines) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceAddStorageEnginesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addStorageEngines", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceAddStorageEnginesResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.AddStorageEngines(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addStorageEngines: "+err2.Error())
		oprot.WriteMessageBegin("addStorageEngines", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addStorageEngines", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorAggregateQuery struct {
	handler IService
}

func (p *iServiceProcessorAggregateQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceAggregateQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("aggregateQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceAggregateQueryResult{}
	var retval *AggregateQueryResp
	var err2 error
	if retval, err2 = p.handler.AggregateQuery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aggregateQuery: "+err2.Error())
		oprot.WriteMessageBegin("aggregateQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("aggregateQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorLastQuery struct {
	handler IService
}

func (p *iServiceProcessorLastQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceLastQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("lastQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceLastQueryResult{}
	var retval *LastQueryResp
	var err2 error
	if retval, err2 = p.handler.LastQuery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lastQuery: "+err2.Error())
		oprot.WriteMessageBegin("lastQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("lastQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorDownsampleQuery struct {
	handler IService
}

func (p *iServiceProcessorDownsampleQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceDownsampleQueryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("downsampleQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceDownsampleQueryResult{}
	var retval *DownsampleQueryResp
	var err2 error
	if retval, err2 = p.handler.DownsampleQuery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing downsampleQuery: "+err2.Error())
		oprot.WriteMessageBegin("downsampleQuery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("downsampleQuery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorShowColumns struct {
	handler IService
}

func (p *iServiceProcessorShowColumns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceShowColumnsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("showColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceShowColumnsResult{}
	var retval *ShowColumnsResp
	var err2 error
	if retval, err2 = p.handler.ShowColumns(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing showColumns: "+err2.Error())
		oprot.WriteMessageBegin("showColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("showColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorGetReplicaNum struct {
	handler IService
}

func (p *iServiceProcessorGetReplicaNum) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceGetReplicaNumArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getReplicaNum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceGetReplicaNumResult{}
	var retval *GetReplicaNumResp
	var err2 error
	if retval, err2 = p.handler.GetReplicaNum(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getReplicaNum: "+err2.Error())
		oprot.WriteMessageBegin("getReplicaNum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getReplicaNum", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorExecuteSql struct {
	handler IService
}

func (p *iServiceProcessorExecuteSql) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceExecuteSqlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("executeSql", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceExecuteSqlResult{}
	var retval *ExecuteSqlResp
	var err2 error
	if retval, err2 = p.handler.ExecuteSql(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeSql: "+err2.Error())
		oprot.WriteMessageBegin("executeSql", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("executeSql", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorUpdateUser struct {
	handler IService
}

func (p *iServiceProcessorUpdateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceUpdateUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceUpdateUserResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.UpdateUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUser: "+err2.Error())
		oprot.WriteMessageBegin("updateUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorAddUser struct {
	handler IService
}

func (p *iServiceProcessorAddUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceAddUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceAddUserResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.AddUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addUser: "+err2.Error())
		oprot.WriteMessageBegin("addUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("addUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorDeleteUser struct {
	handler IService
}

func (p *iServiceProcessorDeleteUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceDeleteUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceDeleteUserResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.DeleteUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUser: "+err2.Error())
		oprot.WriteMessageBegin("deleteUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deleteUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorGetUser struct {
	handler IService
}

func (p *iServiceProcessorGetUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceGetUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceGetUserResult{}
	var retval *GetUserResp
	var err2 error
	if retval, err2 = p.handler.GetUser(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUser: "+err2.Error())
		oprot.WriteMessageBegin("getUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorGetClusterInfo struct {
	handler IService
}

func (p *iServiceProcessorGetClusterInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceGetClusterInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getClusterInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceGetClusterInfoResult{}
	var retval *GetClusterInfoResp
	var err2 error
	if retval, err2 = p.handler.GetClusterInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClusterInfo: "+err2.Error())
		oprot.WriteMessageBegin("getClusterInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getClusterInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorExecuteStatement struct {
	handler IService
}

func (p *iServiceProcessorExecuteStatement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceExecuteStatementArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("executeStatement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceExecuteStatementResult{}
	var retval *ExecuteStatementResp
	var err2 error
	if retval, err2 = p.handler.ExecuteStatement(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeStatement: "+err2.Error())
		oprot.WriteMessageBegin("executeStatement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("executeStatement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorFetchResults struct {
	handler IService
}

func (p *iServiceProcessorFetchResults) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceFetchResultsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("fetchResults", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceFetchResultsResult{}
	var retval *FetchResultsResp
	var err2 error
	if retval, err2 = p.handler.FetchResults(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchResults: "+err2.Error())
		oprot.WriteMessageBegin("fetchResults", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("fetchResults", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorCloseStatement struct {
	handler IService
}

func (p *iServiceProcessorCloseStatement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceCloseStatementArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("closeStatement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceCloseStatementResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.CloseStatement(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeStatement: "+err2.Error())
		oprot.WriteMessageBegin("closeStatement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("closeStatement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorCommitTransformJob struct {
	handler IService
}

func (p *iServiceProcessorCommitTransformJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceCommitTransformJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("commitTransformJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceCommitTransformJobResult{}
	var retval *CommitTransformJobResp
	var err2 error
	if retval, err2 = p.handler.CommitTransformJob(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing commitTransformJob: "+err2.Error())
		oprot.WriteMessageBegin("commitTransformJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("commitTransformJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorQueryTransformJobStatus struct {
	handler IService
}

func (p *iServiceProcessorQueryTransformJobStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceQueryTransformJobStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryTransformJobStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceQueryTransformJobStatusResult{}
	var retval *QueryTransformJobStatusResp
	var err2 error
	if retval, err2 = p.handler.QueryTransformJobStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryTransformJobStatus: "+err2.Error())
		oprot.WriteMessageBegin("queryTransformJobStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryTransformJobStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorCancelTransformJob struct {
	handler IService
}

func (p *iServiceProcessorCancelTransformJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceCancelTransformJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelTransformJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceCancelTransformJobResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.CancelTransformJob(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelTransformJob: "+err2.Error())
		oprot.WriteMessageBegin("cancelTransformJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("cancelTransformJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorRegisterTask struct {
	handler IService
}

func (p *iServiceProcessorRegisterTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceRegisterTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceRegisterTaskResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.RegisterTask(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerTask: "+err2.Error())
		oprot.WriteMessageBegin("registerTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("registerTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorDropTask struct {
	handler IService
}

func (p *iServiceProcessorDropTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceDropTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("dropTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceDropTaskResult{}
	var retval *Status
	var err2 error
	if retval, err2 = p.handler.DropTask(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTask: "+err2.Error())
		oprot.WriteMessageBegin("dropTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("dropTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iServiceProcessorGetRegisterTaskInfo struct {
	handler IService
}

func (p *iServiceProcessorGetRegisterTaskInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IServiceGetRegisterTaskInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRegisterTaskInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IServiceGetRegisterTaskInfoResult{}
	var retval *GetRegisterTaskInfoResp
	var err2 error
	if retval, err2 = p.handler.GetRegisterTaskInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRegisterTaskInfo: "+err2.Error())
		oprot.WriteMessageBegin("getRegisterTaskInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRegisterTaskInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type IServiceOpenSessionArgs struct {
	Req *OpenSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceOpenSessionArgs() *IServiceOpenSessionArgs {
	return &IServiceOpenSessionArgs{}
}

var IServiceOpenSessionArgs_Req_DEFAULT *OpenSessionReq

func (p *IServiceOpenSessionArgs) GetReq() *OpenSessionReq {
	if !p.IsSetReq() {
		return IServiceOpenSessionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceOpenSessionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceOpenSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceOpenSessionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &OpenSessionReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceOpenSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("openSession_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceOpenSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceOpenSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceOpenSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceOpenSessionResult struct {
	Success *OpenSessionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceOpenSessionResult() *IServiceOpenSessionResult {
	return &IServiceOpenSessionResult{}
}

var IServiceOpenSessionResult_Success_DEFAULT *OpenSessionResp

func (p *IServiceOpenSessionResult) GetSuccess() *OpenSessionResp {
	if !p.IsSetSuccess() {
		return IServiceOpenSessionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceOpenSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceOpenSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceOpenSessionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &OpenSessionResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceOpenSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("openSession_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceOpenSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceOpenSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceOpenSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceCloseSessionArgs struct {
	Req *CloseSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceCloseSessionArgs() *IServiceCloseSessionArgs {
	return &IServiceCloseSessionArgs{}
}

var IServiceCloseSessionArgs_Req_DEFAULT *CloseSessionReq

func (p *IServiceCloseSessionArgs) GetReq() *CloseSessionReq {
	if !p.IsSetReq() {
		return IServiceCloseSessionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceCloseSessionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceCloseSessionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceCloseSessionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CloseSessionReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceCloseSessionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeSession_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceCloseSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceCloseSessionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceCloseSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceCloseSessionResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceCloseSessionResult() *IServiceCloseSessionResult {
	return &IServiceCloseSessionResult{}
}

var IServiceCloseSessionResult_Success_DEFAULT *Status

func (p *IServiceCloseSessionResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceCloseSessionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceCloseSessionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceCloseSessionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceCloseSessionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceCloseSessionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeSession_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceCloseSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceCloseSessionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceCloseSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceDeleteColumnsArgs struct {
	Req *DeleteColumnsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceDeleteColumnsArgs() *IServiceDeleteColumnsArgs {
	return &IServiceDeleteColumnsArgs{}
}

var IServiceDeleteColumnsArgs_Req_DEFAULT *DeleteColumnsReq

func (p *IServiceDeleteColumnsArgs) GetReq() *DeleteColumnsReq {
	if !p.IsSetReq() {
		return IServiceDeleteColumnsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceDeleteColumnsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceDeleteColumnsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDeleteColumnsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DeleteColumnsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceDeleteColumnsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteColumns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDeleteColumnsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceDeleteColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDeleteColumnsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceDeleteColumnsResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceDeleteColumnsResult() *IServiceDeleteColumnsResult {
	return &IServiceDeleteColumnsResult{}
}

var IServiceDeleteColumnsResult_Success_DEFAULT *Status

func (p *IServiceDeleteColumnsResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceDeleteColumnsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceDeleteColumnsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceDeleteColumnsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDeleteColumnsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceDeleteColumnsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteColumns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDeleteColumnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceDeleteColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDeleteColumnsResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceInsertColumnRecordsArgs struct {
	Req *InsertColumnRecordsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceInsertColumnRecordsArgs() *IServiceInsertColumnRecordsArgs {
	return &IServiceInsertColumnRecordsArgs{}
}

var IServiceInsertColumnRecordsArgs_Req_DEFAULT *InsertColumnRecordsReq

func (p *IServiceInsertColumnRecordsArgs) GetReq() *InsertColumnRecordsReq {
	if !p.IsSetReq() {
		return IServiceInsertColumnRecordsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceInsertColumnRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceInsertColumnRecordsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceInsertColumnRecordsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &InsertColumnRecordsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceInsertColumnRecordsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertColumnRecords_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceInsertColumnRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceInsertColumnRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceInsertColumnRecordsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceInsertColumnRecordsResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceInsertColumnRecordsResult() *IServiceInsertColumnRecordsResult {
	return &IServiceInsertColumnRecordsResult{}
}

var IServiceInsertColumnRecordsResult_Success_DEFAULT *Status

func (p *IServiceInsertColumnRecordsResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceInsertColumnRecordsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceInsertColumnRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceInsertColumnRecordsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceInsertColumnRecordsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceInsertColumnRecordsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertColumnRecords_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceInsertColumnRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceInsertColumnRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceInsertColumnRecordsResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceInsertNonAlignedColumnRecordsArgs struct {
	Req *InsertNonAlignedColumnRecordsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceInsertNonAlignedColumnRecordsArgs() *IServiceInsertNonAlignedColumnRecordsArgs {
	return &IServiceInsertNonAlignedColumnRecordsArgs{}
}

var IServiceInsertNonAlignedColumnRecordsArgs_Req_DEFAULT *InsertNonAlignedColumnRecordsReq

func (p *IServiceInsertNonAlignedColumnRecordsArgs) GetReq() *InsertNonAlignedColumnRecordsReq {
	if !p.IsSetReq() {
		return IServiceInsertNonAlignedColumnRecordsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceInsertNonAlignedColumnRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceInsertNonAlignedColumnRecordsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedColumnRecordsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &InsertNonAlignedColumnRecordsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedColumnRecordsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertNonAlignedColumnRecords_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedColumnRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceInsertNonAlignedColumnRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceInsertNonAlignedColumnRecordsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceInsertNonAlignedColumnRecordsResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceInsertNonAlignedColumnRecordsResult() *IServiceInsertNonAlignedColumnRecordsResult {
	return &IServiceInsertNonAlignedColumnRecordsResult{}
}

var IServiceInsertNonAlignedColumnRecordsResult_Success_DEFAULT *Status

func (p *IServiceInsertNonAlignedColumnRecordsResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceInsertNonAlignedColumnRecordsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceInsertNonAlignedColumnRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceInsertNonAlignedColumnRecordsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedColumnRecordsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedColumnRecordsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertNonAlignedColumnRecords_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedColumnRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceInsertNonAlignedColumnRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceInsertNonAlignedColumnRecordsResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceInsertRowRecordsArgs struct {
	Req *InsertRowRecordsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceInsertRowRecordsArgs() *IServiceInsertRowRecordsArgs {
	return &IServiceInsertRowRecordsArgs{}
}

var IServiceInsertRowRecordsArgs_Req_DEFAULT *InsertRowRecordsReq

func (p *IServiceInsertRowRecordsArgs) GetReq() *InsertRowRecordsReq {
	if !p.IsSetReq() {
		return IServiceInsertRowRecordsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceInsertRowRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceInsertRowRecordsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceInsertRowRecordsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &InsertRowRecordsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceInsertRowRecordsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertRowRecords_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceInsertRowRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceInsertRowRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceInsertRowRecordsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceInsertRowRecordsResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceInsertRowRecordsResult() *IServiceInsertRowRecordsResult {
	return &IServiceInsertRowRecordsResult{}
}

var IServiceInsertRowRecordsResult_Success_DEFAULT *Status

func (p *IServiceInsertRowRecordsResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceInsertRowRecordsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceInsertRowRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceInsertRowRecordsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceInsertRowRecordsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceInsertRowRecordsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertRowRecords_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceInsertRowRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceInsertRowRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceInsertRowRecordsResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceInsertNonAlignedRowRecordsArgs struct {
	Req *InsertNonAlignedRowRecordsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceInsertNonAlignedRowRecordsArgs() *IServiceInsertNonAlignedRowRecordsArgs {
	return &IServiceInsertNonAlignedRowRecordsArgs{}
}

var IServiceInsertNonAlignedRowRecordsArgs_Req_DEFAULT *InsertNonAlignedRowRecordsReq

func (p *IServiceInsertNonAlignedRowRecordsArgs) GetReq() *InsertNonAlignedRowRecordsReq {
	if !p.IsSetReq() {
		return IServiceInsertNonAlignedRowRecordsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceInsertNonAlignedRowRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceInsertNonAlignedRowRecordsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedRowRecordsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &InsertNonAlignedRowRecordsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedRowRecordsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertNonAlignedRowRecords_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedRowRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceInsertNonAlignedRowRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceInsertNonAlignedRowRecordsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceInsertNonAlignedRowRecordsResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceInsertNonAlignedRowRecordsResult() *IServiceInsertNonAlignedRowRecordsResult {
	return &IServiceInsertNonAlignedRowRecordsResult{}
}

var IServiceInsertNonAlignedRowRecordsResult_Success_DEFAULT *Status

func (p *IServiceInsertNonAlignedRowRecordsResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceInsertNonAlignedRowRecordsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceInsertNonAlignedRowRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceInsertNonAlignedRowRecordsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedRowRecordsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedRowRecordsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertNonAlignedRowRecords_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceInsertNonAlignedRowRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceInsertNonAlignedRowRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceInsertNonAlignedRowRecordsResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceDeleteDataInColumnsArgs struct {
	Req *DeleteDataInColumnsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceDeleteDataInColumnsArgs() *IServiceDeleteDataInColumnsArgs {
	return &IServiceDeleteDataInColumnsArgs{}
}

var IServiceDeleteDataInColumnsArgs_Req_DEFAULT *DeleteDataInColumnsReq

func (p *IServiceDeleteDataInColumnsArgs) GetReq() *DeleteDataInColumnsReq {
	if !p.IsSetReq() {
		return IServiceDeleteDataInColumnsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceDeleteDataInColumnsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceDeleteDataInColumnsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDeleteDataInColumnsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DeleteDataInColumnsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceDeleteDataInColumnsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDataInColumns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDeleteDataInColumnsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceDeleteDataInColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDeleteDataInColumnsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceDeleteDataInColumnsResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceDeleteDataInColumnsResult() *IServiceDeleteDataInColumnsResult {
	return &IServiceDeleteDataInColumnsResult{}
}

var IServiceDeleteDataInColumnsResult_Success_DEFAULT *Status

func (p *IServiceDeleteDataInColumnsResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceDeleteDataInColumnsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceDeleteDataInColumnsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceDeleteDataInColumnsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDeleteDataInColumnsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceDeleteDataInColumnsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteDataInColumns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDeleteDataInColumnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceDeleteDataInColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDeleteDataInColumnsResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceQueryDataArgs struct {
	Req *QueryDataReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceQueryDataArgs() *IServiceQueryDataArgs {
	return &IServiceQueryDataArgs{}
}

var IServiceQueryDataArgs_Req_DEFAULT *QueryDataReq

func (p *IServiceQueryDataArgs) GetReq() *QueryDataReq {
	if !p.IsSetReq() {
		return IServiceQueryDataArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceQueryDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceQueryDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceQueryDataArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &QueryDataReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceQueryDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceQueryDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceQueryDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceQueryDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceQueryDataResult struct {
	Success *QueryDataResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceQueryDataResult() *IServiceQueryDataResult {
	return &IServiceQueryDataResult{}
}

var IServiceQueryDataResult_Success_DEFAULT *QueryDataResp

func (p *IServiceQueryDataResult) GetSuccess() *QueryDataResp {
	if !p.IsSetSuccess() {
		return IServiceQueryDataResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceQueryDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceQueryDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceQueryDataResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryDataResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceQueryDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceQueryDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceQueryDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceQueryDataResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceAddStorageEnginesArgs struct {
	Req *AddStorageEnginesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceAddStorageEnginesArgs() *IServiceAddStorageEnginesArgs {
	return &IServiceAddStorageEnginesArgs{}
}

var IServiceAddStorageEnginesArgs_Req_DEFAULT *AddStorageEnginesReq

func (p *IServiceAddStorageEnginesArgs) GetReq() *AddStorageEnginesReq {
	if !p.IsSetReq() {
		return IServiceAddStorageEnginesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceAddStorageEnginesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceAddStorageEnginesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceAddStorageEnginesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &AddStorageEnginesReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceAddStorageEnginesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addStorageEngines_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceAddStorageEnginesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceAddStorageEnginesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceAddStorageEnginesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceAddStorageEnginesResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceAddStorageEnginesResult() *IServiceAddStorageEnginesResult {
	return &IServiceAddStorageEnginesResult{}
}

var IServiceAddStorageEnginesResult_Success_DEFAULT *Status

func (p *IServiceAddStorageEnginesResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceAddStorageEnginesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceAddStorageEnginesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceAddStorageEnginesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceAddStorageEnginesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceAddStorageEnginesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addStorageEngines_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceAddStorageEnginesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceAddStorageEnginesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceAddStorageEnginesResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceAggregateQueryArgs struct {
	Req *AggregateQueryReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceAggregateQueryArgs() *IServiceAggregateQueryArgs {
	return &IServiceAggregateQueryArgs{}
}

var IServiceAggregateQueryArgs_Req_DEFAULT *AggregateQueryReq

func (p *IServiceAggregateQueryArgs) GetReq() *AggregateQueryReq {
	if !p.IsSetReq() {
		return IServiceAggregateQueryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceAggregateQueryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceAggregateQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceAggregateQueryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &AggregateQueryReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceAggregateQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("aggregateQuery_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceAggregateQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceAggregateQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceAggregateQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceAggregateQueryResult struct {
	Success *AggregateQueryResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceAggregateQueryResult() *IServiceAggregateQueryResult {
	return &IServiceAggregateQueryResult{}
}

var IServiceAggregateQueryResult_Success_DEFAULT *AggregateQueryResp

func (p *IServiceAggregateQueryResult) GetSuccess() *AggregateQueryResp {
	if !p.IsSetSuccess() {
		return IServiceAggregateQueryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceAggregateQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceAggregateQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceAggregateQueryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &AggregateQueryResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceAggregateQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("aggregateQuery_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceAggregateQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceAggregateQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceAggregateQueryResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceLastQueryArgs struct {
	Req *LastQueryReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceLastQueryArgs() *IServiceLastQueryArgs {
	return &IServiceLastQueryArgs{}
}

var IServiceLastQueryArgs_Req_DEFAULT *LastQueryReq

func (p *IServiceLastQueryArgs) GetReq() *LastQueryReq {
	if !p.IsSetReq() {
		return IServiceLastQueryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceLastQueryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceLastQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceLastQueryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &LastQueryReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceLastQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lastQuery_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceLastQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceLastQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceLastQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceLastQueryResult struct {
	Success *LastQueryResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceLastQueryResult() *IServiceLastQueryResult {
	return &IServiceLastQueryResult{}
}

var IServiceLastQueryResult_Success_DEFAULT *LastQueryResp

func (p *IServiceLastQueryResult) GetSuccess() *LastQueryResp {
	if !p.IsSetSuccess() {
		return IServiceLastQueryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceLastQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceLastQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceLastQueryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &LastQueryResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceLastQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lastQuery_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceLastQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceLastQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceLastQueryResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceDownsampleQueryArgs struct {
	Req *DownsampleQueryReq
}

func NewIServiceDownsampleQueryArgs() *IServiceDownsampleQueryArgs {
	return &IServiceDownsampleQueryArgs{}
}

var IServiceDownsampleQueryArgs_Req_DEFAULT *DownsampleQueryReq

func (p *IServiceDownsampleQueryArgs) GetReq() *DownsampleQueryReq {
	if !p.IsSetReq() {
		return IServiceDownsampleQueryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceDownsampleQueryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceDownsampleQueryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case -1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField_1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDownsampleQueryArgs) ReadField_1(iprot thrift.TProtocol) error {
	p.Req = &DownsampleQueryReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceDownsampleQueryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("downsampleQuery_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField_1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDownsampleQueryArgs) writeField_1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, -1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error -1:req: ", p), err)
	}
	return err
}

func (p *IServiceDownsampleQueryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDownsampleQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceDownsampleQueryResult struct {
	Success *DownsampleQueryResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceDownsampleQueryResult() *IServiceDownsampleQueryResult {
	return &IServiceDownsampleQueryResult{}
}

var IServiceDownsampleQueryResult_Success_DEFAULT *DownsampleQueryResp

func (p *IServiceDownsampleQueryResult) GetSuccess() *DownsampleQueryResp {
	if !p.IsSetSuccess() {
		return IServiceDownsampleQueryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceDownsampleQueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceDownsampleQueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDownsampleQueryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DownsampleQueryResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceDownsampleQueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("downsampleQuery_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDownsampleQueryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceDownsampleQueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDownsampleQueryResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceShowColumnsArgs struct {
	Req *ShowColumnsReq
}

func NewIServiceShowColumnsArgs() *IServiceShowColumnsArgs {
	return &IServiceShowColumnsArgs{}
}

var IServiceShowColumnsArgs_Req_DEFAULT *ShowColumnsReq

func (p *IServiceShowColumnsArgs) GetReq() *ShowColumnsReq {
	if !p.IsSetReq() {
		return IServiceShowColumnsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceShowColumnsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceShowColumnsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case -1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField_1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceShowColumnsArgs) ReadField_1(iprot thrift.TProtocol) error {
	p.Req = &ShowColumnsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceShowColumnsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("showColumns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField_1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceShowColumnsArgs) writeField_1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, -1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error -1:req: ", p), err)
	}
	return err
}

func (p *IServiceShowColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceShowColumnsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceShowColumnsResult struct {
	Success *ShowColumnsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceShowColumnsResult() *IServiceShowColumnsResult {
	return &IServiceShowColumnsResult{}
}

var IServiceShowColumnsResult_Success_DEFAULT *ShowColumnsResp

func (p *IServiceShowColumnsResult) GetSuccess() *ShowColumnsResp {
	if !p.IsSetSuccess() {
		return IServiceShowColumnsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceShowColumnsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceShowColumnsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceShowColumnsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ShowColumnsResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceShowColumnsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("showColumns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceShowColumnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceShowColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceShowColumnsResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceGetReplicaNumArgs struct {
	Req *GetReplicaNumReq
}

func NewIServiceGetReplicaNumArgs() *IServiceGetReplicaNumArgs {
	return &IServiceGetReplicaNumArgs{}
}

var IServiceGetReplicaNumArgs_Req_DEFAULT *GetReplicaNumReq

func (p *IServiceGetReplicaNumArgs) GetReq() *GetReplicaNumReq {
	if !p.IsSetReq() {
		return IServiceGetReplicaNumArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceGetReplicaNumArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceGetReplicaNumArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case -1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField_1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceGetReplicaNumArgs) ReadField_1(iprot thrift.TProtocol) error {
	p.Req = &GetReplicaNumReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceGetReplicaNumArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getReplicaNum_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField_1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceGetReplicaNumArgs) writeField_1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, -1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error -1:req: ", p), err)
	}
	return err
}

func (p *IServiceGetReplicaNumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceGetReplicaNumArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceGetReplicaNumResult struct {
	Success *GetReplicaNumResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceGetReplicaNumResult() *IServiceGetReplicaNumResult {
	return &IServiceGetReplicaNumResult{}
}

var IServiceGetReplicaNumResult_Success_DEFAULT *GetReplicaNumResp

func (p *IServiceGetReplicaNumResult) GetSuccess() *GetReplicaNumResp {
	if !p.IsSetSuccess() {
		return IServiceGetReplicaNumResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceGetReplicaNumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceGetReplicaNumResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceGetReplicaNumResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetReplicaNumResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceGetReplicaNumResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getReplicaNum_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceGetReplicaNumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceGetReplicaNumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceGetReplicaNumResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceExecuteSqlArgs struct {
	Req *ExecuteSqlReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceExecuteSqlArgs() *IServiceExecuteSqlArgs {
	return &IServiceExecuteSqlArgs{}
}

var IServiceExecuteSqlArgs_Req_DEFAULT *ExecuteSqlReq

func (p *IServiceExecuteSqlArgs) GetReq() *ExecuteSqlReq {
	if !p.IsSetReq() {
		return IServiceExecuteSqlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceExecuteSqlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceExecuteSqlArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceExecuteSqlArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ExecuteSqlReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceExecuteSqlArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("executeSql_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceExecuteSqlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceExecuteSqlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceExecuteSqlArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceExecuteSqlResult struct {
	Success *ExecuteSqlResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceExecuteSqlResult() *IServiceExecuteSqlResult {
	return &IServiceExecuteSqlResult{}
}

var IServiceExecuteSqlResult_Success_DEFAULT *ExecuteSqlResp

func (p *IServiceExecuteSqlResult) GetSuccess() *ExecuteSqlResp {
	if !p.IsSetSuccess() {
		return IServiceExecuteSqlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceExecuteSqlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceExecuteSqlResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceExecuteSqlResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ExecuteSqlResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceExecuteSqlResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("executeSql_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceExecuteSqlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceExecuteSqlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceExecuteSqlResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceUpdateUserArgs struct {
	Req *UpdateUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceUpdateUserArgs() *IServiceUpdateUserArgs {
	return &IServiceUpdateUserArgs{}
}

var IServiceUpdateUserArgs_Req_DEFAULT *UpdateUserReq

func (p *IServiceUpdateUserArgs) GetReq() *UpdateUserReq {
	if !p.IsSetReq() {
		return IServiceUpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceUpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceUpdateUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceUpdateUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &UpdateUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceUpdateUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceUpdateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceUpdateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceUpdateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceUpdateUserResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceUpdateUserResult() *IServiceUpdateUserResult {
	return &IServiceUpdateUserResult{}
}

var IServiceUpdateUserResult_Success_DEFAULT *Status

func (p *IServiceUpdateUserResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceUpdateUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceUpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceUpdateUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceUpdateUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceUpdateUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceUpdateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceUpdateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceUpdateUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceAddUserArgs struct {
	Req *AddUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceAddUserArgs() *IServiceAddUserArgs {
	return &IServiceAddUserArgs{}
}

var IServiceAddUserArgs_Req_DEFAULT *AddUserReq

func (p *IServiceAddUserArgs) GetReq() *AddUserReq {
	if !p.IsSetReq() {
		return IServiceAddUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceAddUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceAddUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceAddUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &AddUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceAddUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceAddUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceAddUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceAddUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceAddUserResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceAddUserResult() *IServiceAddUserResult {
	return &IServiceAddUserResult{}
}

var IServiceAddUserResult_Success_DEFAULT *Status

func (p *IServiceAddUserResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceAddUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceAddUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceAddUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceAddUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceAddUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceAddUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceAddUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceAddUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceDeleteUserArgs struct {
	Req *DeleteUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceDeleteUserArgs() *IServiceDeleteUserArgs {
	return &IServiceDeleteUserArgs{}
}

var IServiceDeleteUserArgs_Req_DEFAULT *DeleteUserReq

func (p *IServiceDeleteUserArgs) GetReq() *DeleteUserReq {
	if !p.IsSetReq() {
		return IServiceDeleteUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceDeleteUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceDeleteUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDeleteUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DeleteUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceDeleteUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDeleteUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceDeleteUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDeleteUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceDeleteUserResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceDeleteUserResult() *IServiceDeleteUserResult {
	return &IServiceDeleteUserResult{}
}

var IServiceDeleteUserResult_Success_DEFAULT *Status

func (p *IServiceDeleteUserResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceDeleteUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceDeleteUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceDeleteUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDeleteUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceDeleteUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDeleteUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceDeleteUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDeleteUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceGetUserArgs struct {
	Req *GetUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceGetUserArgs() *IServiceGetUserArgs {
	return &IServiceGetUserArgs{}
}

var IServiceGetUserArgs_Req_DEFAULT *GetUserReq

func (p *IServiceGetUserArgs) GetReq() *GetUserReq {
	if !p.IsSetReq() {
		return IServiceGetUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceGetUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceGetUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetUserReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceGetUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceGetUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceGetUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceGetUserResult struct {
	Success *GetUserResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceGetUserResult() *IServiceGetUserResult {
	return &IServiceGetUserResult{}
}

var IServiceGetUserResult_Success_DEFAULT *GetUserResp

func (p *IServiceGetUserResult) GetSuccess() *GetUserResp {
	if !p.IsSetSuccess() {
		return IServiceGetUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceGetUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceGetUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetUserResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceGetUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceGetUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceGetUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceGetClusterInfoArgs struct {
	Req *GetClusterInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceGetClusterInfoArgs() *IServiceGetClusterInfoArgs {
	return &IServiceGetClusterInfoArgs{}
}

var IServiceGetClusterInfoArgs_Req_DEFAULT *GetClusterInfoReq

func (p *IServiceGetClusterInfoArgs) GetReq() *GetClusterInfoReq {
	if !p.IsSetReq() {
		return IServiceGetClusterInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceGetClusterInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceGetClusterInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceGetClusterInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetClusterInfoReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceGetClusterInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getClusterInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceGetClusterInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceGetClusterInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceGetClusterInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceGetClusterInfoResult struct {
	Success *GetClusterInfoResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceGetClusterInfoResult() *IServiceGetClusterInfoResult {
	return &IServiceGetClusterInfoResult{}
}

var IServiceGetClusterInfoResult_Success_DEFAULT *GetClusterInfoResp

func (p *IServiceGetClusterInfoResult) GetSuccess() *GetClusterInfoResp {
	if !p.IsSetSuccess() {
		return IServiceGetClusterInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceGetClusterInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceGetClusterInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceGetClusterInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetClusterInfoResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceGetClusterInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getClusterInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceGetClusterInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceGetClusterInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceGetClusterInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceExecuteStatementArgs struct {
	Req *ExecuteStatementReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceExecuteStatementArgs() *IServiceExecuteStatementArgs {
	return &IServiceExecuteStatementArgs{}
}

var IServiceExecuteStatementArgs_Req_DEFAULT *ExecuteStatementReq

func (p *IServiceExecuteStatementArgs) GetReq() *ExecuteStatementReq {
	if !p.IsSetReq() {
		return IServiceExecuteStatementArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceExecuteStatementArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceExecuteStatementArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceExecuteStatementArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &ExecuteStatementReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceExecuteStatementArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("executeStatement_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceExecuteStatementArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceExecuteStatementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceExecuteStatementArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceExecuteStatementResult struct {
	Success *ExecuteStatementResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceExecuteStatementResult() *IServiceExecuteStatementResult {
	return &IServiceExecuteStatementResult{}
}

var IServiceExecuteStatementResult_Success_DEFAULT *ExecuteStatementResp

func (p *IServiceExecuteStatementResult) GetSuccess() *ExecuteStatementResp {
	if !p.IsSetSuccess() {
		return IServiceExecuteStatementResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceExecuteStatementResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceExecuteStatementResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceExecuteStatementResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ExecuteStatementResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceExecuteStatementResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("executeStatement_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceExecuteStatementResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceExecuteStatementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceExecuteStatementResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceFetchResultsArgs struct {
	Req *FetchResultsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceFetchResultsArgs() *IServiceFetchResultsArgs {
	return &IServiceFetchResultsArgs{}
}

var IServiceFetchResultsArgs_Req_DEFAULT *FetchResultsReq

func (p *IServiceFetchResultsArgs) GetReq() *FetchResultsReq {
	if !p.IsSetReq() {
		return IServiceFetchResultsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceFetchResultsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceFetchResultsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceFetchResultsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &FetchResultsReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceFetchResultsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchResults_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceFetchResultsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceFetchResultsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceFetchResultsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceFetchResultsResult struct {
	Success *FetchResultsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceFetchResultsResult() *IServiceFetchResultsResult {
	return &IServiceFetchResultsResult{}
}

var IServiceFetchResultsResult_Success_DEFAULT *FetchResultsResp

func (p *IServiceFetchResultsResult) GetSuccess() *FetchResultsResp {
	if !p.IsSetSuccess() {
		return IServiceFetchResultsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceFetchResultsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceFetchResultsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceFetchResultsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &FetchResultsResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceFetchResultsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("fetchResults_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceFetchResultsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceFetchResultsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceFetchResultsResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceCloseStatementArgs struct {
	Req *CloseStatementReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceCloseStatementArgs() *IServiceCloseStatementArgs {
	return &IServiceCloseStatementArgs{}
}

var IServiceCloseStatementArgs_Req_DEFAULT *CloseStatementReq

func (p *IServiceCloseStatementArgs) GetReq() *CloseStatementReq {
	if !p.IsSetReq() {
		return IServiceCloseStatementArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceCloseStatementArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceCloseStatementArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceCloseStatementArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CloseStatementReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceCloseStatementArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeStatement_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceCloseStatementArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceCloseStatementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceCloseStatementArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceCloseStatementResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceCloseStatementResult() *IServiceCloseStatementResult {
	return &IServiceCloseStatementResult{}
}

var IServiceCloseStatementResult_Success_DEFAULT *Status

func (p *IServiceCloseStatementResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceCloseStatementResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceCloseStatementResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceCloseStatementResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceCloseStatementResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceCloseStatementResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeStatement_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceCloseStatementResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceCloseStatementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceCloseStatementResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceCommitTransformJobArgs struct {
	Req *CommitTransformJobReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceCommitTransformJobArgs() *IServiceCommitTransformJobArgs {
	return &IServiceCommitTransformJobArgs{}
}

var IServiceCommitTransformJobArgs_Req_DEFAULT *CommitTransformJobReq

func (p *IServiceCommitTransformJobArgs) GetReq() *CommitTransformJobReq {
	if !p.IsSetReq() {
		return IServiceCommitTransformJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceCommitTransformJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceCommitTransformJobArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceCommitTransformJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CommitTransformJobReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceCommitTransformJobArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitTransformJob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceCommitTransformJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceCommitTransformJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceCommitTransformJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceCommitTransformJobResult struct {
	Success *CommitTransformJobResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceCommitTransformJobResult() *IServiceCommitTransformJobResult {
	return &IServiceCommitTransformJobResult{}
}

var IServiceCommitTransformJobResult_Success_DEFAULT *CommitTransformJobResp

func (p *IServiceCommitTransformJobResult) GetSuccess() *CommitTransformJobResp {
	if !p.IsSetSuccess() {
		return IServiceCommitTransformJobResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceCommitTransformJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceCommitTransformJobResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceCommitTransformJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CommitTransformJobResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceCommitTransformJobResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitTransformJob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceCommitTransformJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceCommitTransformJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceCommitTransformJobResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceQueryTransformJobStatusArgs struct {
	Req *QueryTransformJobStatusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceQueryTransformJobStatusArgs() *IServiceQueryTransformJobStatusArgs {
	return &IServiceQueryTransformJobStatusArgs{}
}

var IServiceQueryTransformJobStatusArgs_Req_DEFAULT *QueryTransformJobStatusReq

func (p *IServiceQueryTransformJobStatusArgs) GetReq() *QueryTransformJobStatusReq {
	if !p.IsSetReq() {
		return IServiceQueryTransformJobStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceQueryTransformJobStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceQueryTransformJobStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceQueryTransformJobStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &QueryTransformJobStatusReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceQueryTransformJobStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryTransformJobStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceQueryTransformJobStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceQueryTransformJobStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceQueryTransformJobStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceQueryTransformJobStatusResult struct {
	Success *QueryTransformJobStatusResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceQueryTransformJobStatusResult() *IServiceQueryTransformJobStatusResult {
	return &IServiceQueryTransformJobStatusResult{}
}

var IServiceQueryTransformJobStatusResult_Success_DEFAULT *QueryTransformJobStatusResp

func (p *IServiceQueryTransformJobStatusResult) GetSuccess() *QueryTransformJobStatusResp {
	if !p.IsSetSuccess() {
		return IServiceQueryTransformJobStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceQueryTransformJobStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceQueryTransformJobStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceQueryTransformJobStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &QueryTransformJobStatusResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceQueryTransformJobStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryTransformJobStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceQueryTransformJobStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceQueryTransformJobStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceQueryTransformJobStatusResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceCancelTransformJobArgs struct {
	Req *CancelTransformJobReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceCancelTransformJobArgs() *IServiceCancelTransformJobArgs {
	return &IServiceCancelTransformJobArgs{}
}

var IServiceCancelTransformJobArgs_Req_DEFAULT *CancelTransformJobReq

func (p *IServiceCancelTransformJobArgs) GetReq() *CancelTransformJobReq {
	if !p.IsSetReq() {
		return IServiceCancelTransformJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceCancelTransformJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceCancelTransformJobArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceCancelTransformJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &CancelTransformJobReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceCancelTransformJobArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelTransformJob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceCancelTransformJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceCancelTransformJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceCancelTransformJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceCancelTransformJobResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceCancelTransformJobResult() *IServiceCancelTransformJobResult {
	return &IServiceCancelTransformJobResult{}
}

var IServiceCancelTransformJobResult_Success_DEFAULT *Status

func (p *IServiceCancelTransformJobResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceCancelTransformJobResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceCancelTransformJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceCancelTransformJobResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceCancelTransformJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceCancelTransformJobResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelTransformJob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceCancelTransformJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceCancelTransformJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceCancelTransformJobResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceRegisterTaskArgs struct {
	Req *RegisterTaskReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceRegisterTaskArgs() *IServiceRegisterTaskArgs {
	return &IServiceRegisterTaskArgs{}
}

var IServiceRegisterTaskArgs_Req_DEFAULT *RegisterTaskReq

func (p *IServiceRegisterTaskArgs) GetReq() *RegisterTaskReq {
	if !p.IsSetReq() {
		return IServiceRegisterTaskArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceRegisterTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceRegisterTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceRegisterTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &RegisterTaskReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceRegisterTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerTask_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceRegisterTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceRegisterTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceRegisterTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceRegisterTaskResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceRegisterTaskResult() *IServiceRegisterTaskResult {
	return &IServiceRegisterTaskResult{}
}

var IServiceRegisterTaskResult_Success_DEFAULT *Status

func (p *IServiceRegisterTaskResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceRegisterTaskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceRegisterTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceRegisterTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceRegisterTaskResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceRegisterTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerTask_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceRegisterTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceRegisterTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceRegisterTaskResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceDropTaskArgs struct {
	Req *DropTaskReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceDropTaskArgs() *IServiceDropTaskArgs {
	return &IServiceDropTaskArgs{}
}

var IServiceDropTaskArgs_Req_DEFAULT *DropTaskReq

func (p *IServiceDropTaskArgs) GetReq() *DropTaskReq {
	if !p.IsSetReq() {
		return IServiceDropTaskArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceDropTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceDropTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDropTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &DropTaskReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceDropTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dropTask_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDropTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceDropTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDropTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceDropTaskResult struct {
	Success *Status `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceDropTaskResult() *IServiceDropTaskResult {
	return &IServiceDropTaskResult{}
}

var IServiceDropTaskResult_Success_DEFAULT *Status

func (p *IServiceDropTaskResult) GetSuccess() *Status {
	if !p.IsSetSuccess() {
		return IServiceDropTaskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceDropTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceDropTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceDropTaskResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Status{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceDropTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dropTask_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceDropTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceDropTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceDropTaskResult(%+v)", *p)
}

// Attributes:
//  - Req
type IServiceGetRegisterTaskInfoArgs struct {
	Req *GetRegisterTaskInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewIServiceGetRegisterTaskInfoArgs() *IServiceGetRegisterTaskInfoArgs {
	return &IServiceGetRegisterTaskInfoArgs{}
}

var IServiceGetRegisterTaskInfoArgs_Req_DEFAULT *GetRegisterTaskInfoReq

func (p *IServiceGetRegisterTaskInfoArgs) GetReq() *GetRegisterTaskInfoReq {
	if !p.IsSetReq() {
		return IServiceGetRegisterTaskInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *IServiceGetRegisterTaskInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IServiceGetRegisterTaskInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceGetRegisterTaskInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = &GetRegisterTaskInfoReq{}
	if err := p.Req.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
	}
	return nil
}

func (p *IServiceGetRegisterTaskInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRegisterTaskInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceGetRegisterTaskInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err)
	}
	if err := p.Req.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err)
	}
	return err
}

func (p *IServiceGetRegisterTaskInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceGetRegisterTaskInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IServiceGetRegisterTaskInfoResult struct {
	Success *GetRegisterTaskInfoResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIServiceGetRegisterTaskInfoResult() *IServiceGetRegisterTaskInfoResult {
	return &IServiceGetRegisterTaskInfoResult{}
}

var IServiceGetRegisterTaskInfoResult_Success_DEFAULT *GetRegisterTaskInfoResp

func (p *IServiceGetRegisterTaskInfoResult) GetSuccess() *GetRegisterTaskInfoResp {
	if !p.IsSetSuccess() {
		return IServiceGetRegisterTaskInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *IServiceGetRegisterTaskInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IServiceGetRegisterTaskInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IServiceGetRegisterTaskInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GetRegisterTaskInfoResp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *IServiceGetRegisterTaskInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRegisterTaskInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IServiceGetRegisterTaskInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IServiceGetRegisterTaskInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IServiceGetRegisterTaskInfoResult(%+v)", *p)
}
